package org.modelexecution.xmof.examples.fuml.trace.tracemanager;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.gemoc.trace.commons.model.trace.LaunchConfiguration;
import org.eclipse.gemoc.trace.commons.model.trace.MSEModel;
import org.eclipse.gemoc.trace.commons.model.trace.SequentialStep;
import org.modelexecution.xmof.gemoc.tracebenchmark.api.BenchmarkTraceConstructor;

import org.eclipse.gemoc.trace.gemoc.api.ITraceConstructor;

public class FumlConfigurationTraceConstructor implements ITraceConstructor, BenchmarkTraceConstructor {
	private fumlConfigurationTrace.SpecificTrace traceRoot;
	private MSEModel mseModel;
	private Resource executedModel;
	private final Map<EObject, EObject> exeToTraced;

	private fumlConfigurationTrace.States.State lastState;

	private Resource traceResource;
	private Deque<fumlConfigurationTrace.Steps.SpecificStep> context = new LinkedList<fumlConfigurationTrace.Steps.SpecificStep>();

	public FumlConfigurationTraceConstructor(Resource exeModel, Resource traceResource,
			Map<EObject, EObject> exeToTraced) {
		this.traceResource = traceResource;
		this.executedModel = exeModel;
		this.exeToTraced = exeToTraced;
	}
	
	public Map<EObject, EObject> getExeToTraced() {
		return exeToTraced;
	}

	public void preCleanUp() {
		exeToTraced.clear();
	}

	public void cleanUp() {
		this.executedModel.getContents().clear();
		this.executedModel.unload();
		this.traceResource.getContents().clear();
		this.traceResource.unload();
		this.executedModel = null;
		this.traceResource = null;
		this.traceRoot = null;
	}

	public Resource getTraceResource() {
		return traceResource;
	}

	public int getStatesSize() {
		return traceRoot.getStatesTrace().size();
	}

	private void addInitialState() {
		if (lastState == null) {
			// Creation of the initial state
			Set<Resource> allResources = getAllExecutedModelResources();
			lastState = fumlConfigurationTrace.States.StatesFactory.eINSTANCE.createState();
			for (Resource r : allResources) {
				for (TreeIterator<EObject> i = r.getAllContents(); i.hasNext();) {
					EObject o = i.next();

					if (o instanceof fumlConfiguration.Loci.Locus) {
						fumlConfiguration.Loci.Locus o_cast = (fumlConfiguration.Loci.Locus) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Loci.ExecutionFactory) {
						fumlConfiguration.Loci.ExecutionFactory o_cast = (fumlConfiguration.Loci.ExecutionFactory) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Loci.SemanticVisitor) {
						fumlConfiguration.Loci.SemanticVisitor o_cast = (fumlConfiguration.Loci.SemanticVisitor) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Loci.ExecutionEnvironment) {
						fumlConfiguration.Loci.ExecutionEnvironment o_cast = (fumlConfiguration.Loci.ExecutionEnvironment) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Offer) {
						fumlConfiguration.Activities.IntermediateActivities.Offer o_cast = (fumlConfiguration.Activities.IntermediateActivities.Offer) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Token) {
						fumlConfiguration.Activities.IntermediateActivities.Token o_cast = (fumlConfiguration.Activities.IntermediateActivities.Token) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Input.InputParameterValues) {
						fumlConfiguration.Input.InputParameterValues o_cast = (fumlConfiguration.Input.InputParameterValues) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Loci.Executor) {
						fumlConfiguration.Loci.Executor o_cast = (fumlConfiguration.Loci.Executor) o;
						addNewObjectToState(o_cast, lastState);
					} else

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o;
						addNewObjectToState(o_cast, lastState);
					}
				}
			}
			this.traceRoot.getStatesTrace().add(lastState);
		}
	}

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AbstractionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ManifestationConfiguration) {
			addNewObjectToState((fumlConfiguration.ManifestationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RealizationConfiguration) {
			addNewObjectToState((fumlConfiguration.RealizationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAbstractionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAbstractionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAbstractionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AcceptCallActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAcceptCallActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAcceptCallActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAcceptCallActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AcceptEventActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.AcceptCallActionConfiguration) {
			addNewObjectToState((fumlConfiguration.AcceptCallActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAcceptEventActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAcceptEventActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAcceptEventActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.ActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.BasicActions.InvocationActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.InvocationActionActivation) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.CreateObjectActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.IntermediateActions.CreateObjectActionActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.BasicActions.OpaqueActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.OpaqueActionActivation) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.ValueSpecificationActionActivation) {
			addNewObjectToState(
					(fumlConfiguration.Actions.IntermediateActions.ValueSpecificationActionActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.StructuralFeatureActionActivation) {
			addNewObjectToState(
					(fumlConfiguration.Actions.IntermediateActions.StructuralFeatureActionActivation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ReadSelfActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadSelfActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuredActivityNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuredActivityNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadIsClassifiedObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadIsClassifiedObjectActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReclassifyObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReclassifyObjectActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReduceActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReduceActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CreateObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CreateObjectActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TestIdentityActionConfiguration) {
			addNewObjectToState((fumlConfiguration.TestIdentityActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadLinkObjectEndActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadLinkObjectEndActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReplyActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReplyActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OpaqueActionConfiguration) {
			addNewObjectToState((fumlConfiguration.OpaqueActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClearAssociationActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ClearAssociationActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DestroyObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.DestroyObjectActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuralFeatureActionConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuralFeatureActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InvocationActionConfiguration) {
			addNewObjectToState((fumlConfiguration.InvocationActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RaiseExceptionActionConfiguration) {
			addNewObjectToState((fumlConfiguration.RaiseExceptionActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ValueSpecificationActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ValueSpecificationActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.AcceptEventActionConfiguration) {
			addNewObjectToState((fumlConfiguration.AcceptEventActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.UnmarshallActionConfiguration) {
			addNewObjectToState((fumlConfiguration.UnmarshallActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StartClassifierBehaviorActionConfiguration) {
			addNewObjectToState((fumlConfiguration.StartClassifierBehaviorActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadLinkObjectEndQualifierActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadLinkObjectEndQualifierActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.VariableActionConfiguration) {
			addNewObjectToState((fumlConfiguration.VariableActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadExtentActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadExtentActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LinkActionConfiguration) {
			addNewObjectToState((fumlConfiguration.LinkActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActionExecutionSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActionExecutionSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActionExecutionSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActionExecutionSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActionInputPinConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActionInputPinConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActionInputPinConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActionInputPinConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.ActivityContentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ActivityNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityGroupConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityGroupConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityContentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityContentConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityContentConfigurations().add(tracedObject);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityEdgeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ObjectFlowConfiguration) {
			addNewObjectToState((fumlConfiguration.ObjectFlowConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ControlFlowConfiguration) {
			addNewObjectToState((fumlConfiguration.ControlFlowConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityEdgeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityEdgeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityEdgeInstance();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityEdgeInstances().add(tracedObject);

			// Creation of the first value of the field
			// edge_ActivityEdgeInstance
			fumlConfigurationTrace.States.ActivityEdgeInstance_edge_ActivityEdgeInstance_Value firstValue_edge_ActivityEdgeInstance = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityEdgeInstance_edge_ActivityEdgeInstance_Value();

			if (o_cast.getEdge_ActivityEdgeInstance() != null) {
				addNewObjectToState((fumlConfiguration.ActivityEdgeConfiguration) o_cast.getEdge_ActivityEdgeInstance(),
						newState);
				firstValue_edge_ActivityEdgeInstance.setEdge_ActivityEdgeInstance(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration) exeToTraced
								.get(o_cast.getEdge_ActivityEdgeInstance())));
			} else {
				firstValue_edge_ActivityEdgeInstance.setEdge_ActivityEdgeInstance(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration) null);
			}

			tracedObject.getEdge_ActivityEdgeInstanceSequence().add(firstValue_edge_ActivityEdgeInstance);
			newState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values()
					.add(firstValue_edge_ActivityEdgeInstance);

			// Creation of the first value of the field
			// group_ActivityEdgeInstance
			fumlConfigurationTrace.States.ActivityEdgeInstance_group_ActivityEdgeInstance_Value firstValue_group_ActivityEdgeInstance = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityEdgeInstance_group_ActivityEdgeInstance_Value();

			if (o_cast.getGroup_ActivityEdgeInstance() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityEdgeInstance(),
						newState);
				firstValue_group_ActivityEdgeInstance.setGroup_ActivityEdgeInstance(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityEdgeInstance())));
			} else {
				firstValue_group_ActivityEdgeInstance.setGroup_ActivityEdgeInstance(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityEdgeInstanceSequence().add(firstValue_group_ActivityEdgeInstance);
			newState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values()
					.add(firstValue_group_ActivityEdgeInstance);

			// Creation of the first value of the field offers
			fumlConfigurationTrace.States.ActivityEdgeInstance_offers_Value firstValue_offers = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityEdgeInstance_offers_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Offer aValue : o_cast.getOffers()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Offer) aValue, newState);
			}

			firstValue_offers.getOffers()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer>) getExeToTraced(
							o_cast.getOffers(), newState));

			tracedObject.getOffersSequence().add(firstValue_offers);
			newState.getActivityEdgeInstance_offers_Values().add(firstValue_offers);

			// Creation of the first value of the field source
			fumlConfigurationTrace.States.ActivityEdgeInstance_source_Value firstValue_source = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityEdgeInstance_source_Value();

			if (o_cast.getSource() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getSource(),
						newState);
				firstValue_source.setSource(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getSource())));
			} else {
				firstValue_source.setSource(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getSourceSequence().add(firstValue_source);
			newState.getActivityEdgeInstance_source_Values().add(firstValue_source);

			// Creation of the first value of the field target
			fumlConfigurationTrace.States.ActivityEdgeInstance_target_Value firstValue_target = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityEdgeInstance_target_Value();

			if (o_cast.getTarget() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getTarget(),
						newState);
				firstValue_target.setTarget(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getTarget())));
			} else {
				firstValue_target.setTarget(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getTargetSequence().add(firstValue_target);
			newState.getActivityEdgeInstance_target_Values().add(firstValue_target);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ActivityExecution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityExecution();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityExecutions().add(tracedObject);

			// Creation of the first value of the field activationGroup
			fumlConfigurationTrace.States.ActivityExecution_activationGroup_Value firstValue_activationGroup = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityExecution_activationGroup_Value();

			if (o_cast.getActivationGroup() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getActivationGroup(),
						newState);
				firstValue_activationGroup.setActivationGroup(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getActivationGroup())));
			} else {
				firstValue_activationGroup.setActivationGroup(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getActivationGroupSequence().add(firstValue_activationGroup);
			newState.getActivityExecution_activationGroup_Values().add(firstValue_activationGroup);

			// Creation of the first value of the field featureValues
			fumlConfigurationTrace.States.CompoundValue_featureValues_Value firstValue_featureValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCompoundValue_featureValues_Value();

			for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
			}

			firstValue_featureValues.getFeatureValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
							o_cast.getFeatureValues(), newState));

			tracedObject.getFeatureValuesSequence().add(firstValue_featureValues);
			newState.getCompoundValue_featureValues_Values().add(firstValue_featureValues);

			// Creation of the first value of the field locus_ExtensionalValue
			fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value firstValue_locus_ExtensionalValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExtensionalValue_locus_ExtensionalValue_Value();

			if (o_cast.getLocus_ExtensionalValue() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExtensionalValue(), newState);
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExtensionalValue())));
			} else {
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExtensionalValueSequence().add(firstValue_locus_ExtensionalValue);
			newState.getExtensionalValue_locus_ExtensionalValue_Values().add(firstValue_locus_ExtensionalValue);

			// Creation of the first value of the field types
			fumlConfigurationTrace.States.Object_types_Value firstValue_types = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObject_types_Value();

			for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
				addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
			}

			firstValue_types.getTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
							o_cast.getTypes(), newState));

			tracedObject.getTypesSequence().add(firstValue_types);
			newState.getObject_types_Values().add(firstValue_types);

			// Creation of the first value of the field context
			fumlConfigurationTrace.States.Execution_context_Value firstValue_context = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_context_Value();

			if (o_cast.getContext() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast.getContext(), newState);
				firstValue_context.setContext(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast.getContext())));
			} else {
				firstValue_context
						.setContext((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) null);
			}

			tracedObject.getContextSequence().add(firstValue_context);
			newState.getExecution_context_Values().add(firstValue_context);

			// Creation of the first value of the field parameterValues
			fumlConfigurationTrace.States.Execution_parameterValues_Value firstValue_parameterValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_parameterValues_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast.getParameterValues()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue, newState);
			}

			firstValue_parameterValues.getParameterValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
							o_cast.getParameterValues(), newState));

			tracedObject.getParameterValuesSequence().add(firstValue_parameterValues);
			newState.getExecution_parameterValues_Values().add(firstValue_parameterValues);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Activities.IntermediateActivities.ActivityFinalNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityFinalNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityFinalNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityFinalNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityFinalNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityFinalNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityFinalNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityFinalNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityGroupConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.StructuredActivityNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuredActivityNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InterruptibleActivityRegionConfiguration) {
			addNewObjectToState((fumlConfiguration.InterruptibleActivityRegionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityPartitionConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityPartitionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityGroupConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityGroupConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityGroupConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ControlNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ControlNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.BasicActions.ActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.ActionActivation) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityNodeActivationGroup();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityNodeActivationGroups().add(tracedObject);

			// Creation of the first value of the field activityExecution
			fumlConfigurationTrace.States.ActivityNodeActivationGroup_activityExecution_Value firstValue_activityExecution = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivationGroup_activityExecution_Value();

			if (o_cast.getActivityExecution() != null) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) o_cast
						.getActivityExecution(), newState);
				firstValue_activityExecution.setActivityExecution(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) exeToTraced
								.get(o_cast.getActivityExecution())));
			} else {
				firstValue_activityExecution.setActivityExecution(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) null);
			}

			tracedObject.getActivityExecutionSequence().add(firstValue_activityExecution);
			newState.getActivityNodeActivationGroup_activityExecution_Values().add(firstValue_activityExecution);

			// Creation of the first value of the field edgeInstances
			fumlConfigurationTrace.States.ActivityNodeActivationGroup_edgeInstances_Value firstValue_edgeInstances = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivationGroup_edgeInstances_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getEdgeInstances()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_edgeInstances.getEdgeInstances()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getEdgeInstances(), newState));

			tracedObject.getEdgeInstancesSequence().add(firstValue_edgeInstances);
			newState.getActivityNodeActivationGroup_edgeInstances_Values().add(firstValue_edgeInstances);

			// Creation of the first value of the field nodeActivations
			fumlConfigurationTrace.States.ActivityNodeActivationGroup_nodeActivations_Value firstValue_nodeActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivationGroup_nodeActivations_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation aValue : o_cast
					.getNodeActivations()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) aValue,
						newState);
			}

			firstValue_nodeActivations.getNodeActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation>) getExeToTraced(
							o_cast.getNodeActivations(), newState));

			tracedObject.getNodeActivationsSequence().add(firstValue_nodeActivations);
			newState.getActivityNodeActivationGroup_nodeActivations_Values().add(firstValue_nodeActivations);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ObjectNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ObjectNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ControlNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ControlNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExecutableNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ExecutableNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Activities.IntermediateActivities.ActivityParameterNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityParameterNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedActivityParameterNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedActivityParameterNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field offeredTokenCount
			fumlConfigurationTrace.States.ObjectNodeActivation_offeredTokenCount_Value firstValue_offeredTokenCount = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObjectNodeActivation_offeredTokenCount_Value();

			firstValue_offeredTokenCount.setOfferedTokenCount((int) o_cast.getOfferedTokenCount());
			tracedObject.getOfferedTokenCountSequence().add(firstValue_offeredTokenCount);
			newState.getObjectNodeActivation_offeredTokenCount_Values().add(firstValue_offeredTokenCount);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityParameterNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityParameterNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityParameterNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityParameterNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActivityPartitionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActivityPartitionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActivityPartitionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActivityPartitionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ActorConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedActorConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedActorConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedActorConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Actions.IntermediateActions.AddStructuralFeatureValueActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.TracedAddStructuralFeatureValueActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.IntermediateActionsFactory.eINSTANCE
					.createTracedAddStructuralFeatureValueActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActions_tracedAddStructuralFeatureValueActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AddStructuralFeatureValueActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAddStructuralFeatureValueActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAddStructuralFeatureValueActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAddStructuralFeatureValueActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AddVariableValueActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAddVariableValueActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAddVariableValueActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAddVariableValueActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AnyReceiveEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAnyReceiveEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAnyReceiveEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAnyReceiveEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ArtifactConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DeploymentSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.DeploymentSpecificationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedArtifactConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedArtifactConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedArtifactConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AssociationClassConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAssociationClassConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAssociationClassConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAssociationClassConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.AssociationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.AssociationClassConfiguration) {
			addNewObjectToState((fumlConfiguration.AssociationClassConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExtensionConfiguration) {
			addNewObjectToState((fumlConfiguration.ExtensionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CommunicationPathConfiguration) {
			addNewObjectToState((fumlConfiguration.CommunicationPathConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedAssociationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedAssociationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedAssociationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.BehaviorConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.InteractionConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StateMachineConfiguration) {
			addNewObjectToState((fumlConfiguration.StateMachineConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OpaqueBehaviorConfiguration) {
			addNewObjectToState((fumlConfiguration.OpaqueBehaviorConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedBehaviorConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedBehaviorConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedBehaviorConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.BehaviorExecutionSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedBehaviorExecutionSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedBehaviorExecutionSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedBehaviorExecutionSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.BehavioralFeatureConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ReceptionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReceptionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OperationConfiguration) {
			addNewObjectToState((fumlConfiguration.OperationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedBehavioralFeatureConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedBehavioralFeatureConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedBehavioralFeatureConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.BehavioredClassifierConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.UseCaseConfiguration) {
			addNewObjectToState((fumlConfiguration.UseCaseConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CollaborationConfiguration) {
			addNewObjectToState((fumlConfiguration.CollaborationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActorConfiguration) {
			addNewObjectToState((fumlConfiguration.ActorConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClassConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedBehavioredClassifierConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedBehavioredClassifierConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedBehavioredClassifierConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.BooleanValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedBooleanValue tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedBooleanValue();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedBooleanValues().add(tracedObject);

			// Creation of the first value of the field value_BooleanValue
			fumlConfigurationTrace.States.BooleanValue_value_BooleanValue_Value firstValue_value_BooleanValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createBooleanValue_value_BooleanValue_Value();

			firstValue_value_BooleanValue.setValue_BooleanValue((boolean) o_cast.isValue_BooleanValue());
			tracedObject.getValue_BooleanValueSequence().add(firstValue_value_BooleanValue);
			newState.getBooleanValue_value_BooleanValue_Values().add(firstValue_value_BooleanValue);

			// Creation of the first value of the field type
			fumlConfigurationTrace.States.PrimitiveValue_type_Value firstValue_type = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPrimitiveValue_type_Value();

			if (o_cast.getType() != null) {
				addNewObjectToState((fumlConfiguration.PrimitiveTypeConfiguration) o_cast.getType(), newState);
				firstValue_type.setType(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) exeToTraced
								.get(o_cast.getType())));
			} else {
				firstValue_type.setType(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) null);
			}

			tracedObject.getTypeSequence().add(firstValue_type);
			newState.getPrimitiveValue_type_Values().add(firstValue_type);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.BroadcastSignalActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedBroadcastSignalActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedBroadcastSignalActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedBroadcastSignalActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.CallActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.BasicActions.CallBehaviorActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.CallBehaviorActionActivation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CallActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.StartObjectBehaviorActionConfiguration) {
			addNewObjectToState((fumlConfiguration.StartObjectBehaviorActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CallOperationActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CallOperationActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CallBehaviorActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CallBehaviorActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCallActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCallActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCallActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.CallBehaviorActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedCallBehaviorActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.BasicActionsFactory.eINSTANCE
					.createTracedCallBehaviorActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getBasicActions_tracedCallBehaviorActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field callExecutions
			fumlConfigurationTrace.States.CallActionActivation_callExecutions_Value firstValue_callExecutions = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCallActionActivation_callExecutions_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution aValue : o_cast.getCallExecutions()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) aValue, newState);
			}

			firstValue_callExecutions.getCallExecutions()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution>) getExeToTraced(
							o_cast.getCallExecutions(), newState));

			tracedObject.getCallExecutionsSequence().add(firstValue_callExecutions);
			newState.getCallActionActivation_callExecutions_Values().add(firstValue_callExecutions);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CallBehaviorActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCallBehaviorActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCallBehaviorActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCallBehaviorActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CallEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCallEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCallEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCallEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CallOperationActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCallOperationActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCallOperationActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCallOperationActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CentralBufferNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DataStoreNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.DataStoreNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCentralBufferNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCentralBufferNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCentralBufferNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ChangeEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedChangeEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedChangeEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedChangeEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClassConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.NodeConfiguration) {
			addNewObjectToState((fumlConfiguration.NodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.AssociationClassConfiguration) {
			addNewObjectToState((fumlConfiguration.AssociationClassConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ComponentConfiguration) {
			addNewObjectToState((fumlConfiguration.ComponentConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BehaviorConfiguration) {
			addNewObjectToState((fumlConfiguration.BehaviorConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StereotypeConfiguration) {
			addNewObjectToState((fumlConfiguration.StereotypeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClassConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClassConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClassifierConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.InformationItemConfiguration) {
			addNewObjectToState((fumlConfiguration.InformationItemConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DataTypeConfiguration) {
			addNewObjectToState((fumlConfiguration.DataTypeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.AssociationConfiguration) {
			addNewObjectToState((fumlConfiguration.AssociationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ArtifactConfiguration) {
			addNewObjectToState((fumlConfiguration.ArtifactConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InterfaceConfiguration) {
			addNewObjectToState((fumlConfiguration.InterfaceConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.SignalConfiguration) {
			addNewObjectToState((fumlConfiguration.SignalConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BehavioredClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.BehavioredClassifierConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuredClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuredClassifierConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClassifierConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClassifierConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClassifierConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClassifierTemplateParameterConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClassifierTemplateParameterConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClassifierTemplateParameterConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClassifierTemplateParameterConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClauseConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClauseConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClauseConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClauseConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClearAssociationActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClearAssociationActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClearAssociationActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClearAssociationActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClearStructuralFeatureActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClearStructuralFeatureActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClearStructuralFeatureActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClearStructuralFeatureActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ClearVariableActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedClearVariableActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedClearVariableActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedClearVariableActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CollaborationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCollaborationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCollaborationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCollaborationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CollaborationUseConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCollaborationUseConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCollaborationUseConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCollaborationUseConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CombinedFragmentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConsiderIgnoreFragmentConfiguration) {
			addNewObjectToState((fumlConfiguration.ConsiderIgnoreFragmentConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCombinedFragmentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCombinedFragmentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCombinedFragmentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CommentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCommentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCommentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCommentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CommunicationPathConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCommunicationPathConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCommunicationPathConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCommunicationPathConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ComponentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedComponentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedComponentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedComponentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ComponentRealizationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedComponentRealizationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedComponentRealizationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedComponentRealizationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.CompoundValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.ExtensionalValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.ExtensionalValue) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConditionalNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConditionalNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConditionalNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConditionalNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConnectableElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.ParameterConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.VariableConfiguration) {
			addNewObjectToState((fumlConfiguration.VariableConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PropertyConfiguration) {
			addNewObjectToState((fumlConfiguration.PropertyConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConnectableElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConnectableElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConnectableElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConnectableElementTemplateParameterConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConnectableElementTemplateParameterConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConnectableElementTemplateParameterConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConnectableElementTemplateParameterConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConnectionPointReferenceConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConnectionPointReferenceConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConnectionPointReferenceConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConnectionPointReferenceConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConnectorConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConnectorConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConnectorConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConnectorConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConnectorEndConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConnectorEndConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConnectorEndConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConnectorEndConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConsiderIgnoreFragmentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConsiderIgnoreFragmentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConsiderIgnoreFragmentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConsiderIgnoreFragmentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ConstraintConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.InteractionConstraintConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionConstraintConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.IntervalConstraintConfiguration) {
			addNewObjectToState((fumlConfiguration.IntervalConstraintConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedConstraintConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedConstraintConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedConstraintConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ContinuationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedContinuationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedContinuationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedContinuationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ControlFlowConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedControlFlowConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedControlFlowConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedControlFlowConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ControlNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ForkNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ForkNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.DecisionNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.DecisionNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.InitialNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.InitialNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityFinalNodeActivation) {
			addNewObjectToState(
					(fumlConfiguration.Activities.IntermediateActivities.ActivityFinalNodeActivation) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.JoinNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.JoinNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.MergeNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.MergeNodeActivation) o_cast,
					newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ControlNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.JoinNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.JoinNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ForkNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ForkNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DecisionNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.DecisionNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.FinalNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.FinalNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.MergeNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.MergeNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InitialNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.InitialNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedControlNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedControlNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedControlNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ControlToken o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedControlToken tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedControlToken();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedControlTokens().add(tracedObject);

			// Creation of the first value of the field holder
			fumlConfigurationTrace.States.Token_holder_Value firstValue_holder = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createToken_holder_Value();

			if (o_cast.getHolder() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getHolder(),
						newState);
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getHolder())));
			} else {
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getHolderSequence().add(firstValue_holder);
			newState.getToken_holder_Values().add(firstValue_holder);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CreateLinkActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CreateLinkObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CreateLinkObjectActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCreateLinkActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCreateLinkActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCreateLinkActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CreateLinkObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCreateLinkObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCreateLinkObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCreateLinkObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.IntermediateActions.CreateObjectActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.TracedCreateObjectActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.IntermediateActionsFactory.eINSTANCE
					.createTracedCreateObjectActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActions_tracedCreateObjectActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CreateObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedCreateObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedCreateObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedCreateObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DataStoreNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDataStoreNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDataStoreNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDataStoreNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DataTypeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PrimitiveTypeConfiguration) {
			addNewObjectToState((fumlConfiguration.PrimitiveTypeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.EnumerationConfiguration) {
			addNewObjectToState((fumlConfiguration.EnumerationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDataTypeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDataTypeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDataTypeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.DecisionNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedDecisionNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedDecisionNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedDecisionNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DecisionNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDecisionNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDecisionNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDecisionNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DependencyConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.AbstractionConfiguration) {
			addNewObjectToState((fumlConfiguration.AbstractionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.UsageConfiguration) {
			addNewObjectToState((fumlConfiguration.UsageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DeploymentConfiguration) {
			addNewObjectToState((fumlConfiguration.DeploymentConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDependencyConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDependencyConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDependencyConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DeployedArtifactConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ArtifactConfiguration) {
			addNewObjectToState((fumlConfiguration.ArtifactConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InstanceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.InstanceSpecificationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDeployedArtifactConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDeployedArtifactConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDeployedArtifactConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DeploymentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDeploymentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDeploymentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDeploymentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DeploymentSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDeploymentSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDeploymentSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDeploymentSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DeploymentTargetConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.NodeConfiguration) {
			addNewObjectToState((fumlConfiguration.NodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InstanceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.InstanceSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PropertyConfiguration) {
			addNewObjectToState((fumlConfiguration.PropertyConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDeploymentTargetConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDeploymentTargetConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDeploymentTargetConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DestroyLinkActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDestroyLinkActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDestroyLinkActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDestroyLinkActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DestroyObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDestroyObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDestroyObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDestroyObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DestructionOccurrenceSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDestructionOccurrenceSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDestructionOccurrenceSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDestructionOccurrenceSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DeviceConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDeviceConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDeviceConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDeviceConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DirectedRelationshipConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ProtocolConformanceConfiguration) {
			addNewObjectToState((fumlConfiguration.ProtocolConformanceConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ElementImportConfiguration) {
			addNewObjectToState((fumlConfiguration.ElementImportConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ProfileApplicationConfiguration) {
			addNewObjectToState((fumlConfiguration.ProfileApplicationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.GeneralizationConfiguration) {
			addNewObjectToState((fumlConfiguration.GeneralizationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DependencyConfiguration) {
			addNewObjectToState((fumlConfiguration.DependencyConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TemplateBindingConfiguration) {
			addNewObjectToState((fumlConfiguration.TemplateBindingConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PackageMergeConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageMergeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExtendConfiguration) {
			addNewObjectToState((fumlConfiguration.ExtendConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InformationFlowConfiguration) {
			addNewObjectToState((fumlConfiguration.InformationFlowConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PackageImportConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageImportConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.IncludeConfiguration) {
			addNewObjectToState((fumlConfiguration.IncludeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDirectedRelationshipConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDirectedRelationshipConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDirectedRelationshipConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DurationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDurationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDurationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDurationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DurationConstraintConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDurationConstraintConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDurationConstraintConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDurationConstraintConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DurationIntervalConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDurationIntervalConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDurationIntervalConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDurationIntervalConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.DurationObservationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedDurationObservationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedDurationObservationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedDurationObservationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.TemplateParameterSubstitutionConfiguration) {
			addNewObjectToState((fumlConfiguration.TemplateParameterSubstitutionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TemplateableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.TemplateableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ParameterableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.ParameterableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.MultiplicityElementConfiguration) {
			addNewObjectToState((fumlConfiguration.MultiplicityElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CommentConfiguration) {
			addNewObjectToState((fumlConfiguration.CommentConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClauseConfiguration) {
			addNewObjectToState((fumlConfiguration.ClauseConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LinkEndDataConfiguration) {
			addNewObjectToState((fumlConfiguration.LinkEndDataConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.QualifierValueConfiguration) {
			addNewObjectToState((fumlConfiguration.QualifierValueConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TemplateSignatureConfiguration) {
			addNewObjectToState((fumlConfiguration.TemplateSignatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RelationshipConfiguration) {
			addNewObjectToState((fumlConfiguration.RelationshipConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.SlotConfiguration) {
			addNewObjectToState((fumlConfiguration.SlotConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExceptionHandlerConfiguration) {
			addNewObjectToState((fumlConfiguration.ExceptionHandlerConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.NamedElementConfiguration) {
			addNewObjectToState((fumlConfiguration.NamedElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ImageConfiguration) {
			addNewObjectToState((fumlConfiguration.ImageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TemplateParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.TemplateParameterConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ElementImportConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedElementImportConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedElementImportConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedElementImportConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.EncapsulatedClassifierConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ClassConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedEncapsulatedClassifierConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedEncapsulatedClassifierConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedEncapsulatedClassifierConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.EnumerationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedEnumerationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedEnumerationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedEnumerationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.EnumerationLiteralConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedEnumerationLiteralConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedEnumerationLiteralConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedEnumerationLiteralConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.Evaluation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.LiteralEvaluation) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.LiteralEvaluation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.EventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ChangeEventConfiguration) {
			addNewObjectToState((fumlConfiguration.ChangeEventConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.MessageEventConfiguration) {
			addNewObjectToState((fumlConfiguration.MessageEventConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TimeEventConfiguration) {
			addNewObjectToState((fumlConfiguration.TimeEventConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExceptionHandlerConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExceptionHandlerConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExceptionHandlerConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExceptionHandlerConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExecutableNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExecutableNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExecutableNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExecutableNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution) {
			addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) o_cast,
					newState);
		}

	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Loci.ExecutionEnvironment o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionEnvironment tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Loci.LociFactory.eINSTANCE
					.createTracedExecutionEnvironment();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getLoci_tracedExecutionEnvironments().add(tracedObject);

			// Creation of the first value of the field
			// locus_ExecutionEnvironment
			fumlConfigurationTrace.States.ExecutionEnvironment_locus_ExecutionEnvironment_Value firstValue_locus_ExecutionEnvironment = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecutionEnvironment_locus_ExecutionEnvironment_Value();

			if (o_cast.getLocus_ExecutionEnvironment() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExecutionEnvironment(), newState);
				firstValue_locus_ExecutionEnvironment.setLocus_ExecutionEnvironment(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExecutionEnvironment())));
			} else {
				firstValue_locus_ExecutionEnvironment.setLocus_ExecutionEnvironment(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExecutionEnvironmentSequence().add(firstValue_locus_ExecutionEnvironment);
			newState.getExecutionEnvironment_locus_ExecutionEnvironment_Values()
					.add(firstValue_locus_ExecutionEnvironment);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExecutionEnvironmentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExecutionEnvironmentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExecutionEnvironmentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExecutionEnvironmentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Loci.ExecutionFactory o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Loci.LociFactory.eINSTANCE
					.createTracedExecutionFactory();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getLoci_tracedExecutionFactorys().add(tracedObject);

			// Creation of the first value of the field builtInTypes
			fumlConfigurationTrace.States.ExecutionFactory_builtInTypes_Value firstValue_builtInTypes = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecutionFactory_builtInTypes_Value();

			for (org.eclipse.uml2.uml.PrimitiveType aValue : o_cast.getBuiltInTypes()) {
				addNewObjectToState((fumlConfiguration.PrimitiveTypeConfiguration) aValue, newState);
			}

			firstValue_builtInTypes.getBuiltInTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration>) getExeToTraced(
							o_cast.getBuiltInTypes(), newState));

			tracedObject.getBuiltInTypesSequence().add(firstValue_builtInTypes);
			newState.getExecutionFactory_builtInTypes_Values().add(firstValue_builtInTypes);

			// Creation of the first value of the field locus_ExecutionFactory
			fumlConfigurationTrace.States.ExecutionFactory_locus_ExecutionFactory_Value firstValue_locus_ExecutionFactory = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecutionFactory_locus_ExecutionFactory_Value();

			if (o_cast.getLocus_ExecutionFactory() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExecutionFactory(), newState);
				firstValue_locus_ExecutionFactory.setLocus_ExecutionFactory(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExecutionFactory())));
			} else {
				firstValue_locus_ExecutionFactory.setLocus_ExecutionFactory(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExecutionFactorySequence().add(firstValue_locus_ExecutionFactory);
			newState.getExecutionFactory_locus_ExecutionFactory_Values().add(firstValue_locus_ExecutionFactory);

			// Creation of the first value of the field
			// primitiveBehaviorPrototypes
			fumlConfigurationTrace.States.ExecutionFactory_primitiveBehaviorPrototypes_Value firstValue_primitiveBehaviorPrototypes = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecutionFactory_primitiveBehaviorPrototypes_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution aValue : o_cast
					.getPrimitiveBehaviorPrototypes()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution) aValue,
						newState);
			}

			firstValue_primitiveBehaviorPrototypes.getPrimitiveBehaviorPrototypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedOpaqueBehaviorExecution>) getExeToTraced(
							o_cast.getPrimitiveBehaviorPrototypes(), newState));

			tracedObject.getPrimitiveBehaviorPrototypesSequence().add(firstValue_primitiveBehaviorPrototypes);
			newState.getExecutionFactory_primitiveBehaviorPrototypes_Values()
					.add(firstValue_primitiveBehaviorPrototypes);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExecutionOccurrenceSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExecutionOccurrenceSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExecutionOccurrenceSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExecutionOccurrenceSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExecutionSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ActionExecutionSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.ActionExecutionSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BehaviorExecutionSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.BehaviorExecutionSpecificationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExecutionSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExecutionSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExecutionSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Loci.Executor o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Loci.LociFactory.eINSTANCE
					.createTracedExecutor();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getLoci_tracedExecutors().add(tracedObject);

			// Creation of the first value of the field locus_Executor
			fumlConfigurationTrace.States.Executor_locus_Executor_Value firstValue_locus_Executor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecutor_locus_Executor_Value();

			if (o_cast.getLocus_Executor() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_Executor(), newState);
				firstValue_locus_Executor.setLocus_Executor(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_Executor())));
			} else {
				firstValue_locus_Executor
						.setLocus_Executor((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExecutorSequence().add(firstValue_locus_Executor);
			newState.getExecutor_locus_Executor_Values().add(firstValue_locus_Executor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExpansionNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExpansionNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExpansionNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExpansionNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExpansionRegionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExpansionRegionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExpansionRegionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExpansionRegionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExpressionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.StringExpressionConfiguration) {
			addNewObjectToState((fumlConfiguration.StringExpressionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExpressionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExpressionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExpressionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExtendConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExtendConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExtendConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExtendConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExtensionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExtensionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExtensionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExtensionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExtensionEndConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExtensionEndConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExtensionEndConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExtensionEndConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ExtensionPointConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedExtensionPointConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedExtensionPointConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedExtensionPointConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.ExtensionalValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.Object) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.FeatureConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConnectorConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectorConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuralFeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuralFeatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BehavioralFeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.BehavioralFeatureConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedFeatureConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedFeatureConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedFeatureConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.FeatureValue o_cast,
			fumlConfigurationTrace.States.State newState) {

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.FinalNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ActivityFinalNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityFinalNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.FlowFinalNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.FlowFinalNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedFinalNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedFinalNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedFinalNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.FinalStateConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedFinalStateConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedFinalStateConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedFinalStateConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.FlowFinalNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedFlowFinalNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedFlowFinalNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedFlowFinalNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ForkNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedForkNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedForkNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ForkNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedForkNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedForkNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedForkNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ForkedToken o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedForkedToken();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedForkedTokens().add(tracedObject);

			// Creation of the first value of the field baseToken
			fumlConfigurationTrace.States.ForkedToken_baseToken_Value firstValue_baseToken = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createForkedToken_baseToken_Value();

			if (o_cast.getBaseToken() != null) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) o_cast.getBaseToken(),
						newState);
				firstValue_baseToken.setBaseToken(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) exeToTraced
								.get(o_cast.getBaseToken())));
			} else {
				firstValue_baseToken.setBaseToken(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) null);
			}

			tracedObject.getBaseTokenSequence().add(firstValue_baseToken);
			newState.getForkedToken_baseToken_Values().add(firstValue_baseToken);

			// Creation of the first value of the field baseTokenIsWithdrawn
			fumlConfigurationTrace.States.ForkedToken_baseTokenIsWithdrawn_Value firstValue_baseTokenIsWithdrawn = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createForkedToken_baseTokenIsWithdrawn_Value();

			firstValue_baseTokenIsWithdrawn.setBaseTokenIsWithdrawn((boolean) o_cast.isBaseTokenIsWithdrawn());
			tracedObject.getBaseTokenIsWithdrawnSequence().add(firstValue_baseTokenIsWithdrawn);
			newState.getForkedToken_baseTokenIsWithdrawn_Values().add(firstValue_baseTokenIsWithdrawn);

			// Creation of the first value of the field remainingOffersCount
			fumlConfigurationTrace.States.ForkedToken_remainingOffersCount_Value firstValue_remainingOffersCount = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createForkedToken_remainingOffersCount_Value();

			firstValue_remainingOffersCount.setRemainingOffersCount((int) o_cast.getRemainingOffersCount());
			tracedObject.getRemainingOffersCountSequence().add(firstValue_remainingOffersCount);
			newState.getForkedToken_remainingOffersCount_Values().add(firstValue_remainingOffersCount);

			// Creation of the first value of the field holder
			fumlConfigurationTrace.States.Token_holder_Value firstValue_holder = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createToken_holder_Value();

			if (o_cast.getHolder() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getHolder(),
						newState);
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getHolder())));
			} else {
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getHolderSequence().add(firstValue_holder);
			newState.getToken_holder_Values().add(firstValue_holder);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.FunctionBehaviorConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedFunctionBehaviorConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedFunctionBehaviorConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedFunctionBehaviorConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.GateConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedGateConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedGateConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedGateConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.GeneralOrderingConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedGeneralOrderingConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedGeneralOrderingConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedGeneralOrderingConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.GeneralizationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedGeneralizationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedGeneralizationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedGeneralizationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.GeneralizationSetConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedGeneralizationSetConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedGeneralizationSetConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedGeneralizationSetConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ImageConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedImageConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedImageConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedImageConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.IncludeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedIncludeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedIncludeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedIncludeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InformationFlowConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInformationFlowConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInformationFlowConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInformationFlowConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InformationItemConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInformationItemConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInformationItemConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInformationItemConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.InitialNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedInitialNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedInitialNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedInitialNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InitialNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInitialNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInitialNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInitialNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Input.InputParameterValues o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Input.InputFactory.eINSTANCE
					.createTracedInputParameterValues();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getInput_tracedInputParameterValuess().add(tracedObject);

			// Creation of the first value of the field name
			fumlConfigurationTrace.States.InputParameterValues_name_Value firstValue_name = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createInputParameterValues_name_Value();

			firstValue_name.setName((java.lang.String) o_cast.getName());
			tracedObject.getNameSequence().add(firstValue_name);
			newState.getInputParameterValues_name_Values().add(firstValue_name);

			// Creation of the first value of the field parameterValues
			fumlConfigurationTrace.States.InputParameterValues_parameterValues_Value firstValue_parameterValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createInputParameterValues_parameterValues_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast.getParameterValues()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue, newState);
			}

			firstValue_parameterValues.getParameterValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
							o_cast.getParameterValues(), newState));

			tracedObject.getParameterValuesSequence().add(firstValue_parameterValues);
			newState.getInputParameterValues_parameterValues_Values().add(firstValue_parameterValues);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.InputPinActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedInputPinActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.BasicActionsFactory.eINSTANCE
					.createTracedInputPinActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getBasicActions_tracedInputPinActivations().add(tracedObject);

			// Creation of the first value of the field actionActivation
			fumlConfigurationTrace.States.PinActivation_actionActivation_Value firstValue_actionActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPinActivation_actionActivation_Value();

			if (o_cast.getActionActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Actions.BasicActions.ActionActivation) o_cast.getActionActivation(),
						newState);
				firstValue_actionActivation.setActionActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
								.get(o_cast.getActionActivation())));
			} else {
				firstValue_actionActivation.setActionActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) null);
			}

			tracedObject.getActionActivationSequence().add(firstValue_actionActivation);
			newState.getPinActivation_actionActivation_Values().add(firstValue_actionActivation);

			// Creation of the first value of the field count_temp
			fumlConfigurationTrace.States.PinActivation_count_temp_Value firstValue_count_temp = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPinActivation_count_temp_Value();

			firstValue_count_temp.setCount_temp((int) o_cast.getCount_temp());
			tracedObject.getCount_tempSequence().add(firstValue_count_temp);
			newState.getPinActivation_count_temp_Values().add(firstValue_count_temp);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field offeredTokenCount
			fumlConfigurationTrace.States.ObjectNodeActivation_offeredTokenCount_Value firstValue_offeredTokenCount = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObjectNodeActivation_offeredTokenCount_Value();

			firstValue_offeredTokenCount.setOfferedTokenCount((int) o_cast.getOfferedTokenCount());
			tracedObject.getOfferedTokenCountSequence().add(firstValue_offeredTokenCount);
			newState.getObjectNodeActivation_offeredTokenCount_Values().add(firstValue_offeredTokenCount);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InputPinConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ActionInputPinConfiguration) {
			addNewObjectToState((fumlConfiguration.ActionInputPinConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ValuePinConfiguration) {
			addNewObjectToState((fumlConfiguration.ValuePinConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInputPinConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInputPinConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInputPinConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InstanceSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.EnumerationLiteralConfiguration) {
			addNewObjectToState((fumlConfiguration.EnumerationLiteralConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInstanceSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInstanceSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInstanceSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InstanceValueConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInstanceValueConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInstanceValueConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInstanceValueConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerGreaterFunctionBehaviorExecution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.TracedIntegerGreaterFunctionBehaviorExecution tracedObject = fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerFunctionsFactory.eINSTANCE
					.createTracedIntegerGreaterFunctionBehaviorExecution();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntegerFunctions_tracedIntegerGreaterFunctionBehaviorExecutions().add(tracedObject);

			// Creation of the first value of the field featureValues
			fumlConfigurationTrace.States.CompoundValue_featureValues_Value firstValue_featureValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCompoundValue_featureValues_Value();

			for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
			}

			firstValue_featureValues.getFeatureValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
							o_cast.getFeatureValues(), newState));

			tracedObject.getFeatureValuesSequence().add(firstValue_featureValues);
			newState.getCompoundValue_featureValues_Values().add(firstValue_featureValues);

			// Creation of the first value of the field locus_ExtensionalValue
			fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value firstValue_locus_ExtensionalValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExtensionalValue_locus_ExtensionalValue_Value();

			if (o_cast.getLocus_ExtensionalValue() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExtensionalValue(), newState);
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExtensionalValue())));
			} else {
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExtensionalValueSequence().add(firstValue_locus_ExtensionalValue);
			newState.getExtensionalValue_locus_ExtensionalValue_Values().add(firstValue_locus_ExtensionalValue);

			// Creation of the first value of the field types
			fumlConfigurationTrace.States.Object_types_Value firstValue_types = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObject_types_Value();

			for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
				addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
			}

			firstValue_types.getTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
							o_cast.getTypes(), newState));

			tracedObject.getTypesSequence().add(firstValue_types);
			newState.getObject_types_Values().add(firstValue_types);

			// Creation of the first value of the field context
			fumlConfigurationTrace.States.Execution_context_Value firstValue_context = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_context_Value();

			if (o_cast.getContext() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast.getContext(), newState);
				firstValue_context.setContext(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast.getContext())));
			} else {
				firstValue_context
						.setContext((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) null);
			}

			tracedObject.getContextSequence().add(firstValue_context);
			newState.getExecution_context_Values().add(firstValue_context);

			// Creation of the first value of the field parameterValues
			fumlConfigurationTrace.States.Execution_parameterValues_Value firstValue_parameterValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_parameterValues_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast.getParameterValues()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue, newState);
			}

			firstValue_parameterValues.getParameterValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
							o_cast.getParameterValues(), newState));

			tracedObject.getParameterValuesSequence().add(firstValue_parameterValues);
			newState.getExecution_parameterValues_Values().add(firstValue_parameterValues);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerLessFunctionBehaviorExecution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.TracedIntegerLessFunctionBehaviorExecution tracedObject = fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerFunctionsFactory.eINSTANCE
					.createTracedIntegerLessFunctionBehaviorExecution();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntegerFunctions_tracedIntegerLessFunctionBehaviorExecutions().add(tracedObject);

			// Creation of the first value of the field featureValues
			fumlConfigurationTrace.States.CompoundValue_featureValues_Value firstValue_featureValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCompoundValue_featureValues_Value();

			for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
			}

			firstValue_featureValues.getFeatureValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
							o_cast.getFeatureValues(), newState));

			tracedObject.getFeatureValuesSequence().add(firstValue_featureValues);
			newState.getCompoundValue_featureValues_Values().add(firstValue_featureValues);

			// Creation of the first value of the field locus_ExtensionalValue
			fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value firstValue_locus_ExtensionalValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExtensionalValue_locus_ExtensionalValue_Value();

			if (o_cast.getLocus_ExtensionalValue() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExtensionalValue(), newState);
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExtensionalValue())));
			} else {
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExtensionalValueSequence().add(firstValue_locus_ExtensionalValue);
			newState.getExtensionalValue_locus_ExtensionalValue_Values().add(firstValue_locus_ExtensionalValue);

			// Creation of the first value of the field types
			fumlConfigurationTrace.States.Object_types_Value firstValue_types = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObject_types_Value();

			for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
				addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
			}

			firstValue_types.getTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
							o_cast.getTypes(), newState));

			tracedObject.getTypesSequence().add(firstValue_types);
			newState.getObject_types_Values().add(firstValue_types);

			// Creation of the first value of the field context
			fumlConfigurationTrace.States.Execution_context_Value firstValue_context = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_context_Value();

			if (o_cast.getContext() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast.getContext(), newState);
				firstValue_context.setContext(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast.getContext())));
			} else {
				firstValue_context
						.setContext((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) null);
			}

			tracedObject.getContextSequence().add(firstValue_context);
			newState.getExecution_context_Values().add(firstValue_context);

			// Creation of the first value of the field parameterValues
			fumlConfigurationTrace.States.Execution_parameterValues_Value firstValue_parameterValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_parameterValues_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast.getParameterValues()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue, newState);
			}

			firstValue_parameterValues.getParameterValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
							o_cast.getParameterValues(), newState));

			tracedObject.getParameterValuesSequence().add(firstValue_parameterValues);
			newState.getExecution_parameterValues_Values().add(firstValue_parameterValues);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerPlusFunctionBehaviorExecution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.TracedIntegerPlusFunctionBehaviorExecution tracedObject = fumlConfigurationTrace.States.fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerFunctionsFactory.eINSTANCE
					.createTracedIntegerPlusFunctionBehaviorExecution();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntegerFunctions_tracedIntegerPlusFunctionBehaviorExecutions().add(tracedObject);

			// Creation of the first value of the field featureValues
			fumlConfigurationTrace.States.CompoundValue_featureValues_Value firstValue_featureValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCompoundValue_featureValues_Value();

			for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
			}

			firstValue_featureValues.getFeatureValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
							o_cast.getFeatureValues(), newState));

			tracedObject.getFeatureValuesSequence().add(firstValue_featureValues);
			newState.getCompoundValue_featureValues_Values().add(firstValue_featureValues);

			// Creation of the first value of the field locus_ExtensionalValue
			fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value firstValue_locus_ExtensionalValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExtensionalValue_locus_ExtensionalValue_Value();

			if (o_cast.getLocus_ExtensionalValue() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExtensionalValue(), newState);
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExtensionalValue())));
			} else {
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExtensionalValueSequence().add(firstValue_locus_ExtensionalValue);
			newState.getExtensionalValue_locus_ExtensionalValue_Values().add(firstValue_locus_ExtensionalValue);

			// Creation of the first value of the field types
			fumlConfigurationTrace.States.Object_types_Value firstValue_types = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObject_types_Value();

			for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
				addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
			}

			firstValue_types.getTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
							o_cast.getTypes(), newState));

			tracedObject.getTypesSequence().add(firstValue_types);
			newState.getObject_types_Values().add(firstValue_types);

			// Creation of the first value of the field context
			fumlConfigurationTrace.States.Execution_context_Value firstValue_context = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_context_Value();

			if (o_cast.getContext() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast.getContext(), newState);
				firstValue_context.setContext(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast.getContext())));
			} else {
				firstValue_context
						.setContext((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) null);
			}

			tracedObject.getContextSequence().add(firstValue_context);
			newState.getExecution_context_Values().add(firstValue_context);

			// Creation of the first value of the field parameterValues
			fumlConfigurationTrace.States.Execution_parameterValues_Value firstValue_parameterValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExecution_parameterValues_Value();

			for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast.getParameterValues()) {
				addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue, newState);
			}

			firstValue_parameterValues.getParameterValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
							o_cast.getParameterValues(), newState));

			tracedObject.getParameterValuesSequence().add(firstValue_parameterValues);
			newState.getExecution_parameterValues_Values().add(firstValue_parameterValues);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.IntegerValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedIntegerValue tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedIntegerValue();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedIntegerValues().add(tracedObject);

			// Creation of the first value of the field value_IntegerValue
			fumlConfigurationTrace.States.IntegerValue_value_IntegerValue_Value firstValue_value_IntegerValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createIntegerValue_value_IntegerValue_Value();

			firstValue_value_IntegerValue.setValue_IntegerValue((int) o_cast.getValue_IntegerValue());
			tracedObject.getValue_IntegerValueSequence().add(firstValue_value_IntegerValue);
			newState.getIntegerValue_value_IntegerValue_Values().add(firstValue_value_IntegerValue);

			// Creation of the first value of the field type
			fumlConfigurationTrace.States.PrimitiveValue_type_Value firstValue_type = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPrimitiveValue_type_Value();

			if (o_cast.getType() != null) {
				addNewObjectToState((fumlConfiguration.PrimitiveTypeConfiguration) o_cast.getType(), newState);
				firstValue_type.setType(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) exeToTraced
								.get(o_cast.getType())));
			} else {
				firstValue_type.setType(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) null);
			}

			tracedObject.getTypeSequence().add(firstValue_type);
			newState.getPrimitiveValue_type_Values().add(firstValue_type);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InteractionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInteractionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInteractionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInteractionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InteractionConstraintConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInteractionConstraintConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInteractionConstraintConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInteractionConstraintConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InteractionFragmentConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CombinedFragmentConfiguration) {
			addNewObjectToState((fumlConfiguration.CombinedFragmentConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ContinuationConfiguration) {
			addNewObjectToState((fumlConfiguration.ContinuationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InteractionUseConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionUseConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OccurrenceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.OccurrenceSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExecutionSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.ExecutionSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StateInvariantConfiguration) {
			addNewObjectToState((fumlConfiguration.StateInvariantConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InteractionConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InteractionOperandConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionOperandConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInteractionFragmentConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInteractionFragmentConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInteractionFragmentConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InteractionOperandConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInteractionOperandConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInteractionOperandConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInteractionOperandConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InteractionUseConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PartDecompositionConfiguration) {
			addNewObjectToState((fumlConfiguration.PartDecompositionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInteractionUseConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInteractionUseConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInteractionUseConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InterfaceConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInterfaceConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInterfaceConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInterfaceConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InterfaceRealizationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInterfaceRealizationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInterfaceRealizationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInterfaceRealizationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InterruptibleActivityRegionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInterruptibleActivityRegionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInterruptibleActivityRegionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInterruptibleActivityRegionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.IntervalConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DurationIntervalConfiguration) {
			addNewObjectToState((fumlConfiguration.DurationIntervalConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TimeIntervalConfiguration) {
			addNewObjectToState((fumlConfiguration.TimeIntervalConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedIntervalConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedIntervalConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedIntervalConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.IntervalConstraintConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DurationConstraintConfiguration) {
			addNewObjectToState((fumlConfiguration.DurationConstraintConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TimeConstraintConfiguration) {
			addNewObjectToState((fumlConfiguration.TimeConstraintConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedIntervalConstraintConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedIntervalConstraintConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedIntervalConstraintConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.InvocationActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.BasicActions.CallActionActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.CallActionActivation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.InvocationActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.SendObjectActionConfiguration) {
			addNewObjectToState((fumlConfiguration.SendObjectActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CallActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CallActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BroadcastSignalActionConfiguration) {
			addNewObjectToState((fumlConfiguration.BroadcastSignalActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.SendSignalActionConfiguration) {
			addNewObjectToState((fumlConfiguration.SendSignalActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedInvocationActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedInvocationActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedInvocationActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.JoinNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedJoinNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedJoinNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedJoinNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.JoinNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedJoinNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedJoinNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedJoinNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LifelineConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLifelineConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLifelineConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLifelineConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LinkActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.WriteLinkActionConfiguration) {
			addNewObjectToState((fumlConfiguration.WriteLinkActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadLinkActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadLinkActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLinkActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLinkActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLinkActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LinkEndCreationDataConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLinkEndCreationDataConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLinkEndCreationDataConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLinkEndCreationDataConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LinkEndDataConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.LinkEndCreationDataConfiguration) {
			addNewObjectToState((fumlConfiguration.LinkEndCreationDataConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LinkEndDestructionDataConfiguration) {
			addNewObjectToState((fumlConfiguration.LinkEndDestructionDataConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLinkEndDataConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLinkEndDataConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLinkEndDataConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LinkEndDestructionDataConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLinkEndDestructionDataConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLinkEndDestructionDataConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLinkEndDestructionDataConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralBooleanConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralBooleanConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralBooleanConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralBooleanConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.LiteralBooleanEvaluation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedLiteralBooleanEvaluation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedLiteralBooleanEvaluation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedLiteralBooleanEvaluations().add(tracedObject);

			// Creation of the first value of the field locus_Evaluation
			fumlConfigurationTrace.States.Evaluation_locus_Evaluation_Value firstValue_locus_Evaluation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createEvaluation_locus_Evaluation_Value();

			if (o_cast.getLocus_Evaluation() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_Evaluation(), newState);
				firstValue_locus_Evaluation.setLocus_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_Evaluation())));
			} else {
				firstValue_locus_Evaluation
						.setLocus_Evaluation((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_EvaluationSequence().add(firstValue_locus_Evaluation);
			newState.getEvaluation_locus_Evaluation_Values().add(firstValue_locus_Evaluation);

			// Creation of the first value of the field specification_Evaluation
			fumlConfigurationTrace.States.Evaluation_specification_Evaluation_Value firstValue_specification_Evaluation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createEvaluation_specification_Evaluation_Value();

			if (o_cast.getSpecification_Evaluation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ValueSpecificationConfiguration) o_cast.getSpecification_Evaluation(),
						newState);
				firstValue_specification_Evaluation.setSpecification_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) exeToTraced
								.get(o_cast.getSpecification_Evaluation())));
			} else {
				firstValue_specification_Evaluation.setSpecification_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) null);
			}

			tracedObject.getSpecification_EvaluationSequence().add(firstValue_specification_Evaluation);
			newState.getEvaluation_specification_Evaluation_Values().add(firstValue_specification_Evaluation);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.LiteralEvaluation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.LiteralBooleanEvaluation) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.LiteralBooleanEvaluation) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.LiteralIntegerEvaluation) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.LiteralIntegerEvaluation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralIntegerConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralIntegerConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralIntegerConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralIntegerConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.LiteralIntegerEvaluation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedLiteralIntegerEvaluation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedLiteralIntegerEvaluation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedLiteralIntegerEvaluations().add(tracedObject);

			// Creation of the first value of the field locus_Evaluation
			fumlConfigurationTrace.States.Evaluation_locus_Evaluation_Value firstValue_locus_Evaluation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createEvaluation_locus_Evaluation_Value();

			if (o_cast.getLocus_Evaluation() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_Evaluation(), newState);
				firstValue_locus_Evaluation.setLocus_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_Evaluation())));
			} else {
				firstValue_locus_Evaluation
						.setLocus_Evaluation((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_EvaluationSequence().add(firstValue_locus_Evaluation);
			newState.getEvaluation_locus_Evaluation_Values().add(firstValue_locus_Evaluation);

			// Creation of the first value of the field specification_Evaluation
			fumlConfigurationTrace.States.Evaluation_specification_Evaluation_Value firstValue_specification_Evaluation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createEvaluation_specification_Evaluation_Value();

			if (o_cast.getSpecification_Evaluation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ValueSpecificationConfiguration) o_cast.getSpecification_Evaluation(),
						newState);
				firstValue_specification_Evaluation.setSpecification_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) exeToTraced
								.get(o_cast.getSpecification_Evaluation())));
			} else {
				firstValue_specification_Evaluation.setSpecification_Evaluation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) null);
			}

			tracedObject.getSpecification_EvaluationSequence().add(firstValue_specification_Evaluation);
			newState.getEvaluation_specification_Evaluation_Values().add(firstValue_specification_Evaluation);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralNullConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralNullConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralNullConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralNullConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralRealConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralRealConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralRealConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralRealConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.LiteralStringConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralStringConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralUnlimitedNaturalConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralUnlimitedNaturalConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralIntegerConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralIntegerConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralBooleanConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralBooleanConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralRealConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralRealConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralNullConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralNullConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralStringConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralStringConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralStringConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralStringConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LiteralUnlimitedNaturalConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLiteralUnlimitedNaturalConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLiteralUnlimitedNaturalConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLiteralUnlimitedNaturalConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Loci.Locus o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Loci.LociFactory.eINSTANCE
					.createTracedLocus();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getLoci_tracedLocuss().add(tracedObject);

			// Creation of the first value of the field executor
			fumlConfigurationTrace.States.Locus_executor_Value firstValue_executor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createLocus_executor_Value();

			if (o_cast.getExecutor() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Executor) o_cast.getExecutor(), newState);
				firstValue_executor.setExecutor(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) exeToTraced
								.get(o_cast.getExecutor())));
			} else {
				firstValue_executor
						.setExecutor((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) null);
			}

			tracedObject.getExecutorSequence().add(firstValue_executor);
			newState.getLocus_executor_Values().add(firstValue_executor);

			// Creation of the first value of the field extensionalValues
			fumlConfigurationTrace.States.Locus_extensionalValues_Value firstValue_extensionalValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createLocus_extensionalValues_Value();

			for (fumlConfiguration.Classes.Kernel.ExtensionalValue aValue : o_cast.getExtensionalValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.ExtensionalValue) aValue, newState);
			}

			firstValue_extensionalValues.getExtensionalValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue>) getExeToTraced(
							o_cast.getExtensionalValues(), newState));

			tracedObject.getExtensionalValuesSequence().add(firstValue_extensionalValues);
			newState.getLocus_extensionalValues_Values().add(firstValue_extensionalValues);

			// Creation of the first value of the field factory
			fumlConfigurationTrace.States.Locus_factory_Value firstValue_factory = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createLocus_factory_Value();

			if (o_cast.getFactory() != null) {
				addNewObjectToState((fumlConfiguration.Loci.ExecutionFactory) o_cast.getFactory(), newState);
				firstValue_factory.setFactory(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) exeToTraced
								.get(o_cast.getFactory())));
			} else {
				firstValue_factory
						.setFactory((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) null);
			}

			tracedObject.getFactorySequence().add(firstValue_factory);
			newState.getLocus_factory_Values().add(firstValue_factory);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.LoopNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedLoopNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedLoopNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedLoopNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ManifestationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedManifestationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedManifestationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedManifestationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.MergeNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedMergeNodeActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedMergeNodeActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedMergeNodeActivations().add(tracedObject);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MergeNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMergeNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMergeNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMergeNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MessageConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMessageConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMessageConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMessageConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MessageEndConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.MessageOccurrenceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.MessageOccurrenceSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.GateConfiguration) {
			addNewObjectToState((fumlConfiguration.GateConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMessageEndConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMessageEndConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMessageEndConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MessageEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.SignalEventConfiguration) {
			addNewObjectToState((fumlConfiguration.SignalEventConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.AnyReceiveEventConfiguration) {
			addNewObjectToState((fumlConfiguration.AnyReceiveEventConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CallEventConfiguration) {
			addNewObjectToState((fumlConfiguration.CallEventConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMessageEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMessageEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMessageEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MessageOccurrenceSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DestructionOccurrenceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.DestructionOccurrenceSpecificationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMessageOccurrenceSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMessageOccurrenceSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMessageOccurrenceSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ModelConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedModelConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedModelConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedModelConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.MultiplicityElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PinConfiguration) {
			addNewObjectToState((fumlConfiguration.PinConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuralFeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuralFeatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ConnectorEndConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectorEndConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.ParameterConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.VariableConfiguration) {
			addNewObjectToState((fumlConfiguration.VariableConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedMultiplicityElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedMultiplicityElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedMultiplicityElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.NamedElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.MessageEndConfiguration) {
			addNewObjectToState((fumlConfiguration.MessageEndConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.MessageConfiguration) {
			addNewObjectToState((fumlConfiguration.MessageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CollaborationUseConfiguration) {
			addNewObjectToState((fumlConfiguration.CollaborationUseConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.NamespaceConfiguration) {
			addNewObjectToState((fumlConfiguration.NamespaceConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TriggerConfiguration) {
			addNewObjectToState((fumlConfiguration.TriggerConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ParameterSetConfiguration) {
			addNewObjectToState((fumlConfiguration.ParameterSetConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DeploymentTargetConfiguration) {
			addNewObjectToState((fumlConfiguration.DeploymentTargetConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityGroupConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityGroupConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExtendConfiguration) {
			addNewObjectToState((fumlConfiguration.ExtendConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InteractionFragmentConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionFragmentConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DeployedArtifactConfiguration) {
			addNewObjectToState((fumlConfiguration.DeployedArtifactConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PackageableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LifelineConfiguration) {
			addNewObjectToState((fumlConfiguration.LifelineConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TypedElementConfiguration) {
			addNewObjectToState((fumlConfiguration.TypedElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RedefinableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.RedefinableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.IncludeConfiguration) {
			addNewObjectToState((fumlConfiguration.IncludeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.VertexConfiguration) {
			addNewObjectToState((fumlConfiguration.VertexConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.GeneralOrderingConfiguration) {
			addNewObjectToState((fumlConfiguration.GeneralOrderingConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedNamedElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedNamedElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedNamedElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.NamespaceConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PackageConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuredActivityNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuredActivityNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TransitionConfiguration) {
			addNewObjectToState((fumlConfiguration.TransitionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassifierConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StateConfiguration) {
			addNewObjectToState((fumlConfiguration.StateConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RegionConfiguration) {
			addNewObjectToState((fumlConfiguration.RegionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InteractionOperandConfiguration) {
			addNewObjectToState((fumlConfiguration.InteractionOperandConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.BehavioralFeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.BehavioralFeatureConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedNamespaceConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedNamespaceConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedNamespaceConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.NodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ExecutionEnvironmentConfiguration) {
			addNewObjectToState((fumlConfiguration.ExecutionEnvironmentConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DeviceConfiguration) {
			addNewObjectToState((fumlConfiguration.DeviceConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedNodeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.Object o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) {
			addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedObject();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedObjects().add(tracedObject);

			// Creation of the first value of the field featureValues
			fumlConfigurationTrace.States.CompoundValue_featureValues_Value firstValue_featureValues = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createCompoundValue_featureValues_Value();

			for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
			}

			firstValue_featureValues.getFeatureValues()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
							o_cast.getFeatureValues(), newState));

			tracedObject.getFeatureValuesSequence().add(firstValue_featureValues);
			newState.getCompoundValue_featureValues_Values().add(firstValue_featureValues);

			// Creation of the first value of the field locus_ExtensionalValue
			fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value firstValue_locus_ExtensionalValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createExtensionalValue_locus_ExtensionalValue_Value();

			if (o_cast.getLocus_ExtensionalValue() != null) {
				addNewObjectToState((fumlConfiguration.Loci.Locus) o_cast.getLocus_ExtensionalValue(), newState);
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast.getLocus_ExtensionalValue())));
			} else {
				firstValue_locus_ExtensionalValue.setLocus_ExtensionalValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) null);
			}

			tracedObject.getLocus_ExtensionalValueSequence().add(firstValue_locus_ExtensionalValue);
			newState.getExtensionalValue_locus_ExtensionalValue_Values().add(firstValue_locus_ExtensionalValue);

			// Creation of the first value of the field types
			fumlConfigurationTrace.States.Object_types_Value firstValue_types = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObject_types_Value();

			for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
				addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
			}

			firstValue_types.getTypes()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
							o_cast.getTypes(), newState));

			tracedObject.getTypesSequence().add(firstValue_types);
			newState.getObject_types_Values().add(firstValue_types);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ObjectFlowConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedObjectFlowConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedObjectFlowConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedObjectFlowConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityParameterNodeActivation) {
			addNewObjectToState(
					(fumlConfiguration.Activities.IntermediateActivities.ActivityParameterNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.BasicActions.PinActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ObjectNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CentralBufferNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.CentralBufferNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PinConfiguration) {
			addNewObjectToState((fumlConfiguration.PinConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExpansionNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ExpansionNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityParameterNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityParameterNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedObjectNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedObjectNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedObjectNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.ObjectToken o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectToken tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedObjectToken();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedObjectTokens().add(tracedObject);

			// Creation of the first value of the field value
			fumlConfigurationTrace.States.ObjectToken_value_Value firstValue_value = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObjectToken_value_Value();

			if (o_cast.getValue() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Value) o_cast.getValue(), newState);
				firstValue_value.setValue(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue) exeToTraced
								.get(o_cast.getValue())));
			} else {
				firstValue_value
						.setValue((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue) null);
			}

			tracedObject.getValueSequence().add(firstValue_value);
			newState.getObjectToken_value_Values().add(firstValue_value);

			// Creation of the first value of the field holder
			fumlConfigurationTrace.States.Token_holder_Value firstValue_holder = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createToken_holder_Value();

			if (o_cast.getHolder() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getHolder(),
						newState);
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getHolder())));
			} else {
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getHolderSequence().add(firstValue_holder);
			newState.getToken_holder_Values().add(firstValue_holder);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ObservationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.TimeObservationConfiguration) {
			addNewObjectToState((fumlConfiguration.TimeObservationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DurationObservationConfiguration) {
			addNewObjectToState((fumlConfiguration.DurationObservationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedObservationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedObservationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedObservationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OccurrenceSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ExecutionOccurrenceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.ExecutionOccurrenceSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.MessageOccurrenceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.MessageOccurrenceSpecificationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOccurrenceSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOccurrenceSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOccurrenceSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.Offer o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedOffer();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedOffers().add(tracedObject);

			// Creation of the first value of the field offeredTokens
			fumlConfigurationTrace.States.Offer_offeredTokens_Value firstValue_offeredTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createOffer_offeredTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getOfferedTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_offeredTokens.getOfferedTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getOfferedTokens(), newState));

			tracedObject.getOfferedTokensSequence().add(firstValue_offeredTokens);
			newState.getOffer_offeredTokens_Values().add(firstValue_offeredTokens);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.OpaqueActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedOpaqueActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.BasicActionsFactory.eINSTANCE
					.createTracedOpaqueActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getBasicActions_tracedOpaqueActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OpaqueActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOpaqueActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOpaqueActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOpaqueActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OpaqueBehaviorConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.FunctionBehaviorConfiguration) {
			addNewObjectToState((fumlConfiguration.FunctionBehaviorConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOpaqueBehaviorConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOpaqueBehaviorConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOpaqueBehaviorConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerGreaterFunctionBehaviorExecution) {
			addNewObjectToState(
					(fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerGreaterFunctionBehaviorExecution) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerPlusFunctionBehaviorExecution) {
			addNewObjectToState(
					(fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerPlusFunctionBehaviorExecution) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerLessFunctionBehaviorExecution) {
			addNewObjectToState(
					(fumlConfiguration.PrimitiveBehaviors.IntegerFunctions.IntegerLessFunctionBehaviorExecution) o_cast,
					newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OpaqueExpressionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOpaqueExpressionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOpaqueExpressionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOpaqueExpressionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OperationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOperationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOperationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOperationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OperationTemplateParameterConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOperationTemplateParameterConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOperationTemplateParameterConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOperationTemplateParameterConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.OutputPinActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedOutputPinActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.BasicActionsFactory.eINSTANCE
					.createTracedOutputPinActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getBasicActions_tracedOutputPinActivations().add(tracedObject);

			// Creation of the first value of the field actionActivation
			fumlConfigurationTrace.States.PinActivation_actionActivation_Value firstValue_actionActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPinActivation_actionActivation_Value();

			if (o_cast.getActionActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Actions.BasicActions.ActionActivation) o_cast.getActionActivation(),
						newState);
				firstValue_actionActivation.setActionActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
								.get(o_cast.getActionActivation())));
			} else {
				firstValue_actionActivation.setActionActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) null);
			}

			tracedObject.getActionActivationSequence().add(firstValue_actionActivation);
			newState.getPinActivation_actionActivation_Values().add(firstValue_actionActivation);

			// Creation of the first value of the field count_temp
			fumlConfigurationTrace.States.PinActivation_count_temp_Value firstValue_count_temp = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createPinActivation_count_temp_Value();

			firstValue_count_temp.setCount_temp((int) o_cast.getCount_temp());
			tracedObject.getCount_tempSequence().add(firstValue_count_temp);
			newState.getPinActivation_count_temp_Values().add(firstValue_count_temp);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field offeredTokenCount
			fumlConfigurationTrace.States.ObjectNodeActivation_offeredTokenCount_Value firstValue_offeredTokenCount = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createObjectNodeActivation_offeredTokenCount_Value();

			firstValue_offeredTokenCount.setOfferedTokenCount((int) o_cast.getOfferedTokenCount());
			tracedObject.getOfferedTokenCountSequence().add(firstValue_offeredTokenCount);
			newState.getObjectNodeActivation_offeredTokenCount_Values().add(firstValue_offeredTokenCount);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.OutputPinConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedOutputPinConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedOutputPinConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedOutputPinConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PackageConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ProfileConfiguration) {
			addNewObjectToState((fumlConfiguration.ProfileConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ModelConfiguration) {
			addNewObjectToState((fumlConfiguration.ModelConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPackageConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPackageConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPackageConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PackageImportConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPackageImportConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPackageImportConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPackageImportConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PackageMergeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPackageMergeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPackageMergeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPackageMergeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PackageableElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PackageConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ValueSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.ValueSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.EventConfiguration) {
			addNewObjectToState((fumlConfiguration.EventConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DependencyConfiguration) {
			addNewObjectToState((fumlConfiguration.DependencyConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.GeneralizationSetConfiguration) {
			addNewObjectToState((fumlConfiguration.GeneralizationSetConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InstanceSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.InstanceSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InformationFlowConfiguration) {
			addNewObjectToState((fumlConfiguration.InformationFlowConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ConstraintConfiguration) {
			addNewObjectToState((fumlConfiguration.ConstraintConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ObservationConfiguration) {
			addNewObjectToState((fumlConfiguration.ObservationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TypeConfiguration) {
			addNewObjectToState((fumlConfiguration.TypeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPackageableElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPackageableElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPackageableElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ParameterConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedParameterConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedParameterConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ParameterSetConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedParameterSetConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedParameterSetConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedParameterSetConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue tracedObject = fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.BasicBehaviorsFactory.eINSTANCE
					.createTracedParameterValue();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getBasicBehaviors_tracedParameterValues().add(tracedObject);

			// Creation of the first value of the field parameter_ParameterValue
			fumlConfigurationTrace.States.ParameterValue_parameter_ParameterValue_Value firstValue_parameter_ParameterValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createParameterValue_parameter_ParameterValue_Value();

			if (o_cast.getParameter_ParameterValue() != null) {
				addNewObjectToState((fumlConfiguration.ParameterConfiguration) o_cast.getParameter_ParameterValue(),
						newState);
				firstValue_parameter_ParameterValue.setParameter_ParameterValue(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration) exeToTraced
								.get(o_cast.getParameter_ParameterValue())));
			} else {
				firstValue_parameter_ParameterValue.setParameter_ParameterValue(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration) null);
			}

			tracedObject.getParameter_ParameterValueSequence().add(firstValue_parameter_ParameterValue);
			newState.getParameterValue_parameter_ParameterValue_Values().add(firstValue_parameter_ParameterValue);

			// Creation of the first value of the field values_ParameterValue
			fumlConfigurationTrace.States.ParameterValue_values_ParameterValue_Value firstValue_values_ParameterValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createParameterValue_values_ParameterValue_Value();

			for (fumlConfiguration.Classes.Kernel.Value aValue : o_cast.getValues_ParameterValue()) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Value) aValue, newState);
			}

			firstValue_values_ParameterValue.getValues_ParameterValue()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue>) getExeToTraced(
							o_cast.getValues_ParameterValue(), newState));

			tracedObject.getValues_ParameterValueSequence().add(firstValue_values_ParameterValue);
			newState.getParameterValue_values_ParameterValue_Values().add(firstValue_values_ParameterValue);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ParameterableElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConnectableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OperationConfiguration) {
			addNewObjectToState((fumlConfiguration.OperationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PackageableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageableElementConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedParameterableElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedParameterableElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedParameterableElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PartDecompositionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPartDecompositionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPartDecompositionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPartDecompositionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.Actions.BasicActions.PinActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.BasicActions.OutputPinActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.OutputPinActivation) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.BasicActions.InputPinActivation) {
			addNewObjectToState((fumlConfiguration.Actions.BasicActions.InputPinActivation) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PinConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.InputPinConfiguration) {
			addNewObjectToState((fumlConfiguration.InputPinConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OutputPinConfiguration) {
			addNewObjectToState((fumlConfiguration.OutputPinConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPinConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPinConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPinConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PortConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPortConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPortConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPortConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PrimitiveTypeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPrimitiveTypeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPrimitiveTypeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.PrimitiveValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.IntegerValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.IntegerValue) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.BooleanValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.BooleanValue) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ProfileApplicationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedProfileApplicationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedProfileApplicationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedProfileApplicationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ProfileConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedProfileConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedProfileConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedProfileConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PropertyConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ExtensionEndConfiguration) {
			addNewObjectToState((fumlConfiguration.ExtensionEndConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PortConfiguration) {
			addNewObjectToState((fumlConfiguration.PortConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPropertyConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPropertyConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPropertyConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ProtocolConformanceConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedProtocolConformanceConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedProtocolConformanceConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedProtocolConformanceConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ProtocolStateMachineConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedProtocolStateMachineConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedProtocolStateMachineConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedProtocolStateMachineConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ProtocolTransitionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedProtocolTransitionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedProtocolTransitionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedProtocolTransitionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.PseudostateConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedPseudostateConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedPseudostateConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedPseudostateConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.QualifierValueConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedQualifierValueConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedQualifierValueConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedQualifierValueConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RaiseExceptionActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRaiseExceptionActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRaiseExceptionActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRaiseExceptionActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadExtentActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadExtentActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadExtentActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadExtentActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadIsClassifiedObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadIsClassifiedObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadIsClassifiedObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadIsClassifiedObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadLinkActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadLinkActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadLinkActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadLinkActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadLinkObjectEndActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadLinkObjectEndActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadLinkObjectEndActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadLinkObjectEndActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadLinkObjectEndQualifierActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadLinkObjectEndQualifierActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadLinkObjectEndQualifierActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadLinkObjectEndQualifierActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadSelfActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadSelfActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadSelfActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadSelfActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Actions.IntermediateActions.ReadStructuralFeatureActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.TracedReadStructuralFeatureActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.IntermediateActionsFactory.eINSTANCE
					.createTracedReadStructuralFeatureActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActions_tracedReadStructuralFeatureActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadStructuralFeatureActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadStructuralFeatureActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadStructuralFeatureActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadStructuralFeatureActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReadVariableActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReadVariableActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReadVariableActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReadVariableActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RealizationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.SubstitutionConfiguration) {
			addNewObjectToState((fumlConfiguration.SubstitutionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InterfaceRealizationConfiguration) {
			addNewObjectToState((fumlConfiguration.InterfaceRealizationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ComponentRealizationConfiguration) {
			addNewObjectToState((fumlConfiguration.ComponentRealizationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRealizationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRealizationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRealizationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReceptionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReceptionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReceptionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReceptionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReclassifyObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReclassifyObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReclassifyObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReclassifyObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RedefinableElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.TransitionConfiguration) {
			addNewObjectToState((fumlConfiguration.TransitionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RedefinableTemplateSignatureConfiguration) {
			addNewObjectToState((fumlConfiguration.RedefinableTemplateSignatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassifierConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.FeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.FeatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExtensionPointConfiguration) {
			addNewObjectToState((fumlConfiguration.ExtensionPointConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StateConfiguration) {
			addNewObjectToState((fumlConfiguration.StateConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RegionConfiguration) {
			addNewObjectToState((fumlConfiguration.RegionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ActivityEdgeConfiguration) {
			addNewObjectToState((fumlConfiguration.ActivityEdgeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRedefinableElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRedefinableElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRedefinableElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RedefinableTemplateSignatureConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRedefinableTemplateSignatureConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRedefinableTemplateSignatureConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRedefinableTemplateSignatureConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReduceActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReduceActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReduceActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReduceActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.Reference o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedReference tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.KernelFactory.eINSTANCE
					.createTracedReference();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getKernel_tracedReferences().add(tracedObject);

			// Creation of the first value of the field referent
			fumlConfigurationTrace.States.Reference_referent_Value firstValue_referent = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createReference_referent_Value();

			if (o_cast.getReferent() != null) {
				addNewObjectToState((fumlConfiguration.Classes.Kernel.Object) o_cast.getReferent(), newState);
				firstValue_referent.setReferent(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast.getReferent())));
			} else {
				firstValue_referent.setReferent(
						(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) null);
			}

			tracedObject.getReferentSequence().add(firstValue_referent);
			newState.getReference_referent_Values().add(firstValue_referent);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RegionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRegionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRegionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRegionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RelationshipConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.AssociationConfiguration) {
			addNewObjectToState((fumlConfiguration.AssociationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DirectedRelationshipConfiguration) {
			addNewObjectToState((fumlConfiguration.DirectedRelationshipConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRelationshipConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRelationshipConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRelationshipConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RemoveStructuralFeatureValueActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRemoveStructuralFeatureValueActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRemoveStructuralFeatureValueActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRemoveStructuralFeatureValueActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.RemoveVariableValueActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedRemoveVariableValueActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedRemoveVariableValueActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedRemoveVariableValueActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ReplyActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedReplyActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedReplyActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedReplyActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Loci.SemanticVisitor o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.Value) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.Value) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.Evaluation) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.Evaluation) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Loci.LociFactory.eINSTANCE
					.createTracedSemanticVisitor();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getLoci_tracedSemanticVisitors().add(tracedObject);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SendObjectActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSendObjectActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSendObjectActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSendObjectActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SendSignalActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSendSignalActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSendSignalActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSendSignalActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SequenceNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSequenceNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSequenceNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSequenceNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SignalConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSignalConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSignalConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSignalConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SignalEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSignalEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSignalEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSignalEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SlotConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSlotConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSlotConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSlotConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StartClassifierBehaviorActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStartClassifierBehaviorActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStartClassifierBehaviorActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStartClassifierBehaviorActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StartObjectBehaviorActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStartObjectBehaviorActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStartObjectBehaviorActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStartObjectBehaviorActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StateConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.FinalStateConfiguration) {
			addNewObjectToState((fumlConfiguration.FinalStateConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStateConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStateConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStateConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StateInvariantConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStateInvariantConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStateInvariantConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStateInvariantConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StateMachineConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ProtocolStateMachineConfiguration) {
			addNewObjectToState((fumlConfiguration.ProtocolStateMachineConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStateMachineConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStateMachineConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStateMachineConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StereotypeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStereotypeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStereotypeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStereotypeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StringExpressionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStringExpressionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStringExpressionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStringExpressionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Actions.IntermediateActions.StructuralFeatureActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.ReadStructuralFeatureActionActivation) {
			addNewObjectToState(
					(fumlConfiguration.Actions.IntermediateActions.ReadStructuralFeatureActionActivation) o_cast,
					newState);
		} else if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.WriteStructuralFeatureActionActivation) {
			addNewObjectToState(
					(fumlConfiguration.Actions.IntermediateActions.WriteStructuralFeatureActionActivation) o_cast,
					newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StructuralFeatureActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ReadStructuralFeatureActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadStructuralFeatureActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.WriteStructuralFeatureActionConfiguration) {
			addNewObjectToState((fumlConfiguration.WriteStructuralFeatureActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClearStructuralFeatureActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ClearStructuralFeatureActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStructuralFeatureActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStructuralFeatureActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStructuralFeatureActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StructuralFeatureConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PropertyConfiguration) {
			addNewObjectToState((fumlConfiguration.PropertyConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStructuralFeatureConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStructuralFeatureConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStructuralFeatureConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StructuredActivityNodeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConditionalNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ConditionalNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.SequenceNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.SequenceNodeConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExpansionRegionConfiguration) {
			addNewObjectToState((fumlConfiguration.ExpansionRegionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LoopNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.LoopNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStructuredActivityNodeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStructuredActivityNodeConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStructuredActivityNodeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.StructuredClassifierConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.CollaborationConfiguration) {
			addNewObjectToState((fumlConfiguration.CollaborationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.EncapsulatedClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.EncapsulatedClassifierConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedStructuredClassifierConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedStructuredClassifierConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedStructuredClassifierConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.StructuredValue o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.Reference) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.Reference) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.CompoundValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.CompoundValue) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.SubstitutionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedSubstitutionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedSubstitutionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedSubstitutionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TemplateBindingConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTemplateBindingConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTemplateBindingConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTemplateBindingConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TemplateParameterConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConnectableElementTemplateParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectableElementTemplateParameterConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClassifierTemplateParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassifierTemplateParameterConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OperationTemplateParameterConfiguration) {
			addNewObjectToState((fumlConfiguration.OperationTemplateParameterConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTemplateParameterConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTemplateParameterConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTemplateParameterConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TemplateParameterSubstitutionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTemplateParameterSubstitutionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTemplateParameterSubstitutionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTemplateParameterSubstitutionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TemplateSignatureConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.RedefinableTemplateSignatureConfiguration) {
			addNewObjectToState((fumlConfiguration.RedefinableTemplateSignatureConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTemplateSignatureConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTemplateSignatureConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTemplateSignatureConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TemplateableElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.PackageConfiguration) {
			addNewObjectToState((fumlConfiguration.PackageConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OperationConfiguration) {
			addNewObjectToState((fumlConfiguration.OperationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StringExpressionConfiguration) {
			addNewObjectToState((fumlConfiguration.StringExpressionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassifierConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTemplateableElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTemplateableElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTemplateableElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TestIdentityActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTestIdentityActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTestIdentityActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTestIdentityActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TimeConstraintConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTimeConstraintConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTimeConstraintConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTimeConstraintConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TimeEventConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTimeEventConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTimeEventConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTimeEventConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TimeExpressionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTimeExpressionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTimeExpressionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTimeExpressionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TimeIntervalConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTimeIntervalConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTimeIntervalConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTimeIntervalConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TimeObservationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTimeObservationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTimeObservationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTimeObservationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Activities.IntermediateActivities.Token o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ForkedToken) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ForkedToken) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectToken) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ObjectToken) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Activities.IntermediateActivities.ControlToken) {
			addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ControlToken) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesFactory.eINSTANCE
					.createTracedToken();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActivities_tracedTokens().add(tracedObject);

			// Creation of the first value of the field holder
			fumlConfigurationTrace.States.Token_holder_Value firstValue_holder = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createToken_holder_Value();

			if (o_cast.getHolder() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o_cast.getHolder(),
						newState);
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast.getHolder())));
			} else {
				firstValue_holder.setHolder(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) null);
			}

			tracedObject.getHolderSequence().add(firstValue_holder);
			newState.getToken_holder_Values().add(firstValue_holder);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TransitionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ProtocolTransitionConfiguration) {
			addNewObjectToState((fumlConfiguration.ProtocolTransitionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTransitionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTransitionConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTransitionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TriggerConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTriggerConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTriggerConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTriggerConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TypeConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ClassifierConfiguration) {
			addNewObjectToState((fumlConfiguration.ClassifierConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTypeConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTypeConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTypeConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.TypedElementConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.ConnectableElementConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectableElementConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ValueSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.ValueSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.StructuralFeatureConfiguration) {
			addNewObjectToState((fumlConfiguration.StructuralFeatureConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ObjectNodeConfiguration) {
			addNewObjectToState((fumlConfiguration.ObjectNodeConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedTypedElementConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedTypedElementConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedTypedElementConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.UnmarshallActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedUnmarshallActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedUnmarshallActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedUnmarshallActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.UsageConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedUsageConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedUsageConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedUsageConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.UseCaseConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedUseCaseConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedUseCaseConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedUseCaseConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private void addNewObjectToState(fumlConfiguration.Classes.Kernel.Value o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Classes.Kernel.StructuredValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.StructuredValue) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.Classes.Kernel.PrimitiveValue) {
			addNewObjectToState((fumlConfiguration.Classes.Kernel.PrimitiveValue) o_cast, newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ValuePinConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedValuePinConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedValuePinConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedValuePinConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Actions.IntermediateActions.ValueSpecificationActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.TracedValueSpecificationActionActivation tracedObject = fumlConfigurationTrace.States.fumlConfiguration.Actions.IntermediateActions.IntermediateActionsFactory.eINSTANCE
					.createTracedValueSpecificationActionActivation();
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getIntermediateActions_tracedValueSpecificationActionActivations().add(tracedObject);

			// Creation of the first value of the field firing
			fumlConfigurationTrace.States.ActionActivation_firing_Value firstValue_firing = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_firing_Value();

			firstValue_firing.setFiring((boolean) o_cast.isFiring());
			tracedObject.getFiringSequence().add(firstValue_firing);
			newState.getActionActivation_firing_Values().add(firstValue_firing);

			// Creation of the first value of the field pinActivations
			fumlConfigurationTrace.States.ActionActivation_pinActivations_Value firstValue_pinActivations = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActionActivation_pinActivations_Value();

			for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast.getPinActivations()) {
				addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue, newState);
			}

			firstValue_pinActivations.getPinActivations()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
							o_cast.getPinActivations(), newState));

			tracedObject.getPinActivationsSequence().add(firstValue_pinActivations);
			newState.getActionActivation_pinActivations_Values().add(firstValue_pinActivations);

			// Creation of the first value of the field
			// group_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value firstValue_group_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_group_ActivityNodeActivation_Value();

			if (o_cast.getGroup_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o_cast
								.getGroup_ActivityNodeActivation(),
						newState);
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast.getGroup_ActivityNodeActivation())));
			} else {
				firstValue_group_ActivityNodeActivation.setGroup_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) null);
			}

			tracedObject.getGroup_ActivityNodeActivationSequence().add(firstValue_group_ActivityNodeActivation);
			newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
					.add(firstValue_group_ActivityNodeActivation);

			// Creation of the first value of the field heldTokens
			fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value firstValue_heldTokens = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_heldTokens_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast.getHeldTokens()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue, newState);
			}

			firstValue_heldTokens.getHeldTokens()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
							o_cast.getHeldTokens(), newState));

			tracedObject.getHeldTokensSequence().add(firstValue_heldTokens);
			newState.getActivityNodeActivation_heldTokens_Values().add(firstValue_heldTokens);

			// Creation of the first value of the field incomingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value firstValue_incomingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_incomingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getIncomingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_incomingEdges.getIncomingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getIncomingEdges(), newState));

			tracedObject.getIncomingEdgesSequence().add(firstValue_incomingEdges);
			newState.getActivityNodeActivation_incomingEdges_Values().add(firstValue_incomingEdges);

			// Creation of the first value of the field isRunning
			fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value firstValue_isRunning = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_isRunning_Value();

			firstValue_isRunning.setIsRunning((boolean) o_cast.isIsRunning());
			tracedObject.getIsRunningSequence().add(firstValue_isRunning);
			newState.getActivityNodeActivation_isRunning_Values().add(firstValue_isRunning);

			// Creation of the first value of the field
			// node_ActivityNodeActivation
			fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value firstValue_node_ActivityNodeActivation = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_node_ActivityNodeActivation_Value();

			if (o_cast.getNode_ActivityNodeActivation() != null) {
				addNewObjectToState(
						(fumlConfiguration.ActivityNodeConfiguration) o_cast.getNode_ActivityNodeActivation(),
						newState);
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
								.get(o_cast.getNode_ActivityNodeActivation())));
			} else {
				firstValue_node_ActivityNodeActivation.setNode_ActivityNodeActivation(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) null);
			}

			tracedObject.getNode_ActivityNodeActivationSequence().add(firstValue_node_ActivityNodeActivation);
			newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
					.add(firstValue_node_ActivityNodeActivation);

			// Creation of the first value of the field outgoingEdges
			fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value firstValue_outgoingEdges = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_outgoingEdges_Value();

			for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
					.getOutgoingEdges()) {
				addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
						newState);
			}

			firstValue_outgoingEdges.getOutgoingEdges()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
							o_cast.getOutgoingEdges(), newState));

			tracedObject.getOutgoingEdgesSequence().add(firstValue_outgoingEdges);
			newState.getActivityNodeActivation_outgoingEdges_Values().add(firstValue_outgoingEdges);

			// Creation of the first value of the field running
			fumlConfigurationTrace.States.ActivityNodeActivation_running_Value firstValue_running = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createActivityNodeActivation_running_Value();

			firstValue_running.setRunning((boolean) o_cast.isRunning());
			tracedObject.getRunningSequence().add(firstValue_running);
			newState.getActivityNodeActivation_running_Values().add(firstValue_running);

			// Creation of the first value of the field runtimeModelElement
			fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value firstValue_runtimeModelElement = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createSemanticVisitor_runtimeModelElement_Value();

			if (o_cast.getRuntimeModelElement() != null) {
				addNewObjectToState((fumlConfiguration.ElementConfiguration) o_cast.getRuntimeModelElement(), newState);
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast.getRuntimeModelElement())));
			} else {
				firstValue_runtimeModelElement.setRuntimeModelElement(
						(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) null);
			}

			tracedObject.getRuntimeModelElementSequence().add(firstValue_runtimeModelElement);
			newState.getSemanticVisitor_runtimeModelElement_Values().add(firstValue_runtimeModelElement);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ValueSpecificationActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedValueSpecificationActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedValueSpecificationActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.ValueSpecificationConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.IntervalConfiguration) {
			addNewObjectToState((fumlConfiguration.IntervalConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.InstanceValueConfiguration) {
			addNewObjectToState((fumlConfiguration.InstanceValueConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ExpressionConfiguration) {
			addNewObjectToState((fumlConfiguration.ExpressionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.OpaqueExpressionConfiguration) {
			addNewObjectToState((fumlConfiguration.OpaqueExpressionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.LiteralSpecificationConfiguration) {
			addNewObjectToState((fumlConfiguration.LiteralSpecificationConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.TimeExpressionConfiguration) {
			addNewObjectToState((fumlConfiguration.TimeExpressionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.DurationConfiguration) {
			addNewObjectToState((fumlConfiguration.DurationConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedValueSpecificationConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedValueSpecificationConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.VariableActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.WriteVariableActionConfiguration) {
			addNewObjectToState((fumlConfiguration.WriteVariableActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ReadVariableActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ReadVariableActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ClearVariableActionConfiguration) {
			addNewObjectToState((fumlConfiguration.ClearVariableActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedVariableActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedVariableActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedVariableActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.VariableConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedVariableConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedVariableConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedVariableConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.VertexConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.StateConfiguration) {
			addNewObjectToState((fumlConfiguration.StateConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.ConnectionPointReferenceConfiguration) {
			addNewObjectToState((fumlConfiguration.ConnectionPointReferenceConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.PseudostateConfiguration) {
			addNewObjectToState((fumlConfiguration.PseudostateConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedVertexConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedVertexConfiguration();
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedVertexConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.WriteLinkActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.DestroyLinkActionConfiguration) {
			addNewObjectToState((fumlConfiguration.DestroyLinkActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.CreateLinkActionConfiguration) {
			addNewObjectToState((fumlConfiguration.CreateLinkActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedWriteLinkActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedWriteLinkActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedWriteLinkActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(
			fumlConfiguration.Actions.IntermediateActions.WriteStructuralFeatureActionActivation o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.Actions.IntermediateActions.AddStructuralFeatureValueActionActivation) {
			addNewObjectToState(
					(fumlConfiguration.Actions.IntermediateActions.AddStructuralFeatureValueActionActivation) o_cast,
					newState);
		}

	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.WriteStructuralFeatureActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.RemoveStructuralFeatureValueActionConfiguration) {
			addNewObjectToState((fumlConfiguration.RemoveStructuralFeatureValueActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.AddStructuralFeatureValueActionConfiguration) {
			addNewObjectToState((fumlConfiguration.AddStructuralFeatureValueActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedWriteStructuralFeatureActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedWriteStructuralFeatureActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedWriteStructuralFeatureActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	@SuppressWarnings("unchecked")
	private void addNewObjectToState(fumlConfiguration.WriteVariableActionConfiguration o_cast,
			fumlConfigurationTrace.States.State newState) {

		if (o_cast instanceof fumlConfiguration.AddVariableValueActionConfiguration) {
			addNewObjectToState((fumlConfiguration.AddVariableValueActionConfiguration) o_cast, newState);
		} else if (o_cast instanceof fumlConfiguration.RemoveVariableValueActionConfiguration) {
			addNewObjectToState((fumlConfiguration.RemoveVariableValueActionConfiguration) o_cast, newState);
		} else

		if (!exeToTraced.containsKey(o_cast)) {
			fumlConfigurationTrace.States.fumlConfiguration.TracedWriteVariableActionConfiguration tracedObject = fumlConfigurationTrace.States.fumlConfiguration.FumlConfigurationFactory.eINSTANCE
					.createTracedWriteVariableActionConfiguration();
			tracedObject.setOriginalObject_ActivityContentConfiguration(
					(fumlConfiguration.ActivityContentConfiguration) o_cast);
			tracedObject.setOriginalObject_ElementConfiguration((fumlConfiguration.ElementConfiguration) o_cast);
			exeToTraced.put(o_cast, tracedObject);
			traceRoot.getFumlConfiguration_tracedWriteVariableActionConfigurations().add(tracedObject);

			// Creation of the first value of the field semanticVisitor
			fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value firstValue_semanticVisitor = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
					.createElementConfiguration_semanticVisitor_Value();

			for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
				addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
			}

			firstValue_semanticVisitor.getSemanticVisitor()
					.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
							o_cast.getSemanticVisitor(), newState));

			tracedObject.getSemanticVisitorSequence().add(firstValue_semanticVisitor);
			newState.getElementConfiguration_semanticVisitor_Values().add(firstValue_semanticVisitor);

		} // end if (!exeToTraced.containsKey
	}// end addNewObjectToState

	private fumlConfigurationTrace.States.State copyState(fumlConfigurationTrace.States.State oldState) {
		fumlConfigurationTrace.States.State newState = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
				.createState();
		newState.getElementConfiguration_semanticVisitor_Values()
				.addAll(oldState.getElementConfiguration_semanticVisitor_Values());
		newState.getActionActivation_firing_Values().addAll(oldState.getActionActivation_firing_Values());
		newState.getActionActivation_pinActivations_Values()
				.addAll(oldState.getActionActivation_pinActivations_Values());
		newState.getCallActionActivation_callExecutions_Values()
				.addAll(oldState.getCallActionActivation_callExecutions_Values());
		newState.getPinActivation_actionActivation_Values().addAll(oldState.getPinActivation_actionActivation_Values());
		newState.getPinActivation_count_temp_Values().addAll(oldState.getPinActivation_count_temp_Values());
		newState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values()
				.addAll(oldState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values());
		newState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values()
				.addAll(oldState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values());
		newState.getActivityEdgeInstance_offers_Values().addAll(oldState.getActivityEdgeInstance_offers_Values());
		newState.getActivityEdgeInstance_source_Values().addAll(oldState.getActivityEdgeInstance_source_Values());
		newState.getActivityEdgeInstance_target_Values().addAll(oldState.getActivityEdgeInstance_target_Values());
		newState.getActivityExecution_activationGroup_Values()
				.addAll(oldState.getActivityExecution_activationGroup_Values());
		newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
				.addAll(oldState.getActivityNodeActivation_group_ActivityNodeActivation_Values());
		newState.getActivityNodeActivation_heldTokens_Values()
				.addAll(oldState.getActivityNodeActivation_heldTokens_Values());
		newState.getActivityNodeActivation_incomingEdges_Values()
				.addAll(oldState.getActivityNodeActivation_incomingEdges_Values());
		newState.getActivityNodeActivation_isRunning_Values()
				.addAll(oldState.getActivityNodeActivation_isRunning_Values());
		newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
				.addAll(oldState.getActivityNodeActivation_node_ActivityNodeActivation_Values());
		newState.getActivityNodeActivation_outgoingEdges_Values()
				.addAll(oldState.getActivityNodeActivation_outgoingEdges_Values());
		newState.getActivityNodeActivation_running_Values().addAll(oldState.getActivityNodeActivation_running_Values());
		newState.getActivityNodeActivationGroup_activityExecution_Values()
				.addAll(oldState.getActivityNodeActivationGroup_activityExecution_Values());
		newState.getActivityNodeActivationGroup_edgeInstances_Values()
				.addAll(oldState.getActivityNodeActivationGroup_edgeInstances_Values());
		newState.getActivityNodeActivationGroup_nodeActivations_Values()
				.addAll(oldState.getActivityNodeActivationGroup_nodeActivations_Values());
		newState.getForkedToken_baseToken_Values().addAll(oldState.getForkedToken_baseToken_Values());
		newState.getForkedToken_baseTokenIsWithdrawn_Values()
				.addAll(oldState.getForkedToken_baseTokenIsWithdrawn_Values());
		newState.getForkedToken_remainingOffersCount_Values()
				.addAll(oldState.getForkedToken_remainingOffersCount_Values());
		newState.getObjectNodeActivation_offeredTokenCount_Values()
				.addAll(oldState.getObjectNodeActivation_offeredTokenCount_Values());
		newState.getObjectToken_value_Values().addAll(oldState.getObjectToken_value_Values());
		newState.getOffer_offeredTokens_Values().addAll(oldState.getOffer_offeredTokens_Values());
		newState.getToken_holder_Values().addAll(oldState.getToken_holder_Values());
		newState.getBooleanValue_value_BooleanValue_Values()
				.addAll(oldState.getBooleanValue_value_BooleanValue_Values());
		newState.getCompoundValue_featureValues_Values().addAll(oldState.getCompoundValue_featureValues_Values());
		newState.getEvaluation_locus_Evaluation_Values().addAll(oldState.getEvaluation_locus_Evaluation_Values());
		newState.getEvaluation_specification_Evaluation_Values()
				.addAll(oldState.getEvaluation_specification_Evaluation_Values());
		newState.getExtensionalValue_locus_ExtensionalValue_Values()
				.addAll(oldState.getExtensionalValue_locus_ExtensionalValue_Values());
		newState.getFeatureValue_feature_Values().addAll(oldState.getFeatureValue_feature_Values());
		newState.getFeatureValue_position_Values().addAll(oldState.getFeatureValue_position_Values());
		newState.getFeatureValue_values_FeatureValue_Values()
				.addAll(oldState.getFeatureValue_values_FeatureValue_Values());
		newState.getIntegerValue_value_IntegerValue_Values()
				.addAll(oldState.getIntegerValue_value_IntegerValue_Values());
		newState.getObject_types_Values().addAll(oldState.getObject_types_Values());
		newState.getPrimitiveValue_type_Values().addAll(oldState.getPrimitiveValue_type_Values());
		newState.getReference_referent_Values().addAll(oldState.getReference_referent_Values());
		newState.getExecution_context_Values().addAll(oldState.getExecution_context_Values());
		newState.getExecution_parameterValues_Values().addAll(oldState.getExecution_parameterValues_Values());
		newState.getParameterValue_parameter_ParameterValue_Values()
				.addAll(oldState.getParameterValue_parameter_ParameterValue_Values());
		newState.getParameterValue_values_ParameterValue_Values()
				.addAll(oldState.getParameterValue_values_ParameterValue_Values());
		newState.getInputParameterValues_name_Values().addAll(oldState.getInputParameterValues_name_Values());
		newState.getInputParameterValues_parameterValues_Values()
				.addAll(oldState.getInputParameterValues_parameterValues_Values());
		newState.getExecutionEnvironment_locus_ExecutionEnvironment_Values()
				.addAll(oldState.getExecutionEnvironment_locus_ExecutionEnvironment_Values());
		newState.getExecutionFactory_builtInTypes_Values().addAll(oldState.getExecutionFactory_builtInTypes_Values());
		newState.getExecutionFactory_locus_ExecutionFactory_Values()
				.addAll(oldState.getExecutionFactory_locus_ExecutionFactory_Values());
		newState.getExecutionFactory_primitiveBehaviorPrototypes_Values()
				.addAll(oldState.getExecutionFactory_primitiveBehaviorPrototypes_Values());
		newState.getExecutor_locus_Executor_Values().addAll(oldState.getExecutor_locus_Executor_Values());
		newState.getLocus_executor_Values().addAll(oldState.getLocus_executor_Values());
		newState.getLocus_extensionalValues_Values().addAll(oldState.getLocus_extensionalValues_Values());
		newState.getLocus_factory_Values().addAll(oldState.getLocus_factory_Values());
		newState.getSemanticVisitor_runtimeModelElement_Values()
				.addAll(oldState.getSemanticVisitor_runtimeModelElement_Values());
		return newState;
	}

	@SuppressWarnings("unchecked")
	@Override
	public void addState(List<org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.ModelChange> changes) {
		if (lastState == null) {
			addInitialState();
		}
		if (!changes.isEmpty()) {
			boolean stateChanged = false;
			// We start by a (shallow) copy of the last state
			// But we will have to rollback a little by replacing values that
			// changed
			fumlConfigurationTrace.States.State newState = copyState(lastState);
			for (org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.ModelChange modelChange : changes) {
				EObject o = modelChange.getChangedObject();
				// We only look at constructable objects that have mutable
				// fields
				// Here we have nothing to rollback, just a new object to add
				if (modelChange instanceof org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.NewObjectModelChange) {
					stateChanged = true;
					if (o instanceof fumlConfiguration.Loci.Locus) {
						fumlConfiguration.Loci.Locus o_cast = (fumlConfiguration.Loci.Locus) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Loci.ExecutionFactory) {
						fumlConfiguration.Loci.ExecutionFactory o_cast = (fumlConfiguration.Loci.ExecutionFactory) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Loci.SemanticVisitor) {
						fumlConfiguration.Loci.SemanticVisitor o_cast = (fumlConfiguration.Loci.SemanticVisitor) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Loci.ExecutionEnvironment) {
						fumlConfiguration.Loci.ExecutionEnvironment o_cast = (fumlConfiguration.Loci.ExecutionEnvironment) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Offer) {
						fumlConfiguration.Activities.IntermediateActivities.Offer o_cast = (fumlConfiguration.Activities.IntermediateActivities.Offer) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Token) {
						fumlConfiguration.Activities.IntermediateActivities.Token o_cast = (fumlConfiguration.Activities.IntermediateActivities.Token) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Input.InputParameterValues) {
						fumlConfiguration.Input.InputParameterValues o_cast = (fumlConfiguration.Input.InputParameterValues) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Loci.Executor) {
						fumlConfiguration.Loci.Executor o_cast = (fumlConfiguration.Loci.Executor) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) o;
						addNewObjectToState(o_cast, newState);
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o;
						addNewObjectToState(o_cast, newState);
					}
				}
				// We only look at constructable objects that have mutable
				// fields
				// Here we must rollback to remove the values of the removed
				// object from the copied state
				else if (modelChange instanceof org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.RemovedObjectModelChange) {
					stateChanged = true;
					if (o instanceof fumlConfiguration.Input.InputParameterValues) {
						fumlConfiguration.Input.InputParameterValues o_cast = (fumlConfiguration.Input.InputParameterValues) o;
						fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues traced = (fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues) exeToTraced
								.get(o_cast);
						newState.getInputParameterValues_name_Values()
								.remove(traced.getNameSequence().get(traced.getNameSequence().size() - 1));
						newState.getInputParameterValues_parameterValues_Values().remove(traced
								.getParameterValuesSequence().get(traced.getParameterValuesSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Actions.BasicActions.PinActivation) {
						fumlConfiguration.Actions.BasicActions.PinActivation o_cast = (fumlConfiguration.Actions.BasicActions.PinActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation) exeToTraced
								.get(o_cast);
						newState.getPinActivation_actionActivation_Values().remove(traced.getActionActivationSequence()
								.get(traced.getActionActivationSequence().size() - 1));
						newState.getPinActivation_count_temp_Values()
								.remove(traced.getCount_tempSequence().get(traced.getCount_tempSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Loci.Executor) {
						fumlConfiguration.Loci.Executor o_cast = (fumlConfiguration.Loci.Executor) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) exeToTraced
								.get(o_cast);
						newState.getExecutor_locus_Executor_Values().remove(
								traced.getLocus_ExecutorSequence().get(traced.getLocus_ExecutorSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast);
						newState.getActivityNodeActivationGroup_edgeInstances_Values().remove(
								traced.getEdgeInstancesSequence().get(traced.getEdgeInstancesSequence().size() - 1));
						newState.getActivityNodeActivationGroup_nodeActivations_Values().remove(traced
								.getNodeActivationsSequence().get(traced.getNodeActivationsSequence().size() - 1));
						newState.getActivityNodeActivationGroup_activityExecution_Values().remove(traced
								.getActivityExecutionSequence().get(traced.getActivityExecutionSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) {
						fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation o_cast = (fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectNodeActivation) exeToTraced
								.get(o_cast);
						newState.getObjectNodeActivation_offeredTokenCount_Values().remove(traced
								.getOfferedTokenCountSequence().get(traced.getOfferedTokenCountSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ForkedToken) {
						fumlConfiguration.Activities.IntermediateActivities.ForkedToken o_cast = (fumlConfiguration.Activities.IntermediateActivities.ForkedToken) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken) exeToTraced
								.get(o_cast);
						newState.getForkedToken_baseToken_Values()
								.remove(traced.getBaseTokenSequence().get(traced.getBaseTokenSequence().size() - 1));
						newState.getForkedToken_remainingOffersCount_Values()
								.remove(traced.getRemainingOffersCountSequence()
										.get(traced.getRemainingOffersCountSequence().size() - 1));
						newState.getForkedToken_baseTokenIsWithdrawn_Values()
								.remove(traced.getBaseTokenIsWithdrawnSequence()
										.get(traced.getBaseTokenIsWithdrawnSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.FeatureValue) {
						fumlConfiguration.Classes.Kernel.FeatureValue o_cast = (fumlConfiguration.Classes.Kernel.FeatureValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue) exeToTraced
								.get(o_cast);
						newState.getFeatureValue_feature_Values()
								.remove(traced.getFeatureSequence().get(traced.getFeatureSequence().size() - 1));
						newState.getFeatureValue_position_Values()
								.remove(traced.getPositionSequence().get(traced.getPositionSequence().size() - 1));
						newState.getFeatureValue_values_FeatureValue_Values()
								.remove(traced.getValues_FeatureValueSequence()
										.get(traced.getValues_FeatureValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Loci.ExecutionFactory) {
						fumlConfiguration.Loci.ExecutionFactory o_cast = (fumlConfiguration.Loci.ExecutionFactory) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) exeToTraced
								.get(o_cast);
						newState.getExecutionFactory_locus_ExecutionFactory_Values()
								.remove(traced.getLocus_ExecutionFactorySequence()
										.get(traced.getLocus_ExecutionFactorySequence().size() - 1));
						newState.getExecutionFactory_primitiveBehaviorPrototypes_Values()
								.remove(traced.getPrimitiveBehaviorPrototypesSequence()
										.get(traced.getPrimitiveBehaviorPrototypesSequence().size() - 1));
						newState.getExecutionFactory_builtInTypes_Values().remove(
								traced.getBuiltInTypesSequence().get(traced.getBuiltInTypesSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Offer) {
						fumlConfiguration.Activities.IntermediateActivities.Offer o_cast = (fumlConfiguration.Activities.IntermediateActivities.Offer) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer) exeToTraced
								.get(o_cast);
						newState.getOffer_offeredTokens_Values().remove(
								traced.getOfferedTokensSequence().get(traced.getOfferedTokensSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.BooleanValue) {
						fumlConfiguration.Classes.Kernel.BooleanValue o_cast = (fumlConfiguration.Classes.Kernel.BooleanValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedBooleanValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedBooleanValue) exeToTraced
								.get(o_cast);
						newState.getBooleanValue_value_BooleanValue_Values()
								.remove(traced.getValue_BooleanValueSequence()
										.get(traced.getValue_BooleanValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Loci.Locus) {
						fumlConfiguration.Loci.Locus o_cast = (fumlConfiguration.Loci.Locus) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast);
						newState.getLocus_factory_Values()
								.remove(traced.getFactorySequence().get(traced.getFactorySequence().size() - 1));
						newState.getLocus_extensionalValues_Values().remove(traced.getExtensionalValuesSequence()
								.get(traced.getExtensionalValuesSequence().size() - 1));
						newState.getLocus_executor_Values()
								.remove(traced.getExecutorSequence().get(traced.getExecutorSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityExecution o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) exeToTraced
								.get(o_cast);
						newState.getActivityExecution_activationGroup_Values().remove(traced
								.getActivationGroupSequence().get(traced.getActivationGroupSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) o;
						fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution traced = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution) exeToTraced
								.get(o_cast);
						newState.getExecution_parameterValues_Values().remove(traced.getParameterValuesSequence()
								.get(traced.getParameterValuesSequence().size() - 1));
						newState.getExecution_context_Values()
								.remove(traced.getContextSequence().get(traced.getContextSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.Object) {
						fumlConfiguration.Classes.Kernel.Object o_cast = (fumlConfiguration.Classes.Kernel.Object) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast);
						newState.getObject_types_Values()
								.remove(traced.getTypesSequence().get(traced.getTypesSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.ExtensionalValue) {
						fumlConfiguration.Classes.Kernel.ExtensionalValue o_cast = (fumlConfiguration.Classes.Kernel.ExtensionalValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue) exeToTraced
								.get(o_cast);
						newState.getExtensionalValue_locus_ExtensionalValue_Values()
								.remove(traced.getLocus_ExtensionalValueSequence()
										.get(traced.getLocus_ExtensionalValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.CompoundValue) {
						fumlConfiguration.Classes.Kernel.CompoundValue o_cast = (fumlConfiguration.Classes.Kernel.CompoundValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedCompoundValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedCompoundValue) exeToTraced
								.get(o_cast);
						newState.getCompoundValue_featureValues_Values().remove(
								traced.getFeatureValuesSequence().get(traced.getFeatureValuesSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.Reference) {
						fumlConfiguration.Classes.Kernel.Reference o_cast = (fumlConfiguration.Classes.Kernel.Reference) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedReference traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedReference) exeToTraced
								.get(o_cast);
						newState.getReference_referent_Values()
								.remove(traced.getReferentSequence().get(traced.getReferentSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Actions.BasicActions.CallActionActivation) {
						fumlConfiguration.Actions.BasicActions.CallActionActivation o_cast = (fumlConfiguration.Actions.BasicActions.CallActionActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedCallActionActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedCallActionActivation) exeToTraced
								.get(o_cast);
						newState.getCallActionActivation_callExecutions_Values().remove(
								traced.getCallExecutionsSequence().get(traced.getCallExecutionsSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Loci.ExecutionEnvironment) {
						fumlConfiguration.Loci.ExecutionEnvironment o_cast = (fumlConfiguration.Loci.ExecutionEnvironment) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionEnvironment traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionEnvironment) exeToTraced
								.get(o_cast);
						newState.getExecutionEnvironment_locus_ExecutionEnvironment_Values()
								.remove(traced.getLocus_ExecutionEnvironmentSequence()
										.get(traced.getLocus_ExecutionEnvironmentSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectToken) {
						fumlConfiguration.Activities.IntermediateActivities.ObjectToken o_cast = (fumlConfiguration.Activities.IntermediateActivities.ObjectToken) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectToken) exeToTraced
								.get(o_cast);
						newState.getObjectToken_value_Values()
								.remove(traced.getValueSequence().get(traced.getValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Token) {
						fumlConfiguration.Activities.IntermediateActivities.Token o_cast = (fumlConfiguration.Activities.IntermediateActivities.Token) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) exeToTraced
								.get(o_cast);
						newState.getToken_holder_Values()
								.remove(traced.getHolderSequence().get(traced.getHolderSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue traced = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue) exeToTraced
								.get(o_cast);
						newState.getParameterValue_values_ParameterValue_Values()
								.remove(traced.getValues_ParameterValueSequence()
										.get(traced.getValues_ParameterValueSequence().size() - 1));
						newState.getParameterValue_parameter_ParameterValue_Values()
								.remove(traced.getParameter_ParameterValueSequence()
										.get(traced.getParameter_ParameterValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.IntegerValue) {
						fumlConfiguration.Classes.Kernel.IntegerValue o_cast = (fumlConfiguration.Classes.Kernel.IntegerValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedIntegerValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedIntegerValue) exeToTraced
								.get(o_cast);
						newState.getIntegerValue_value_IntegerValue_Values()
								.remove(traced.getValue_IntegerValueSequence()
										.get(traced.getValue_IntegerValueSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.PrimitiveValue) {
						fumlConfiguration.Classes.Kernel.PrimitiveValue o_cast = (fumlConfiguration.Classes.Kernel.PrimitiveValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedPrimitiveValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedPrimitiveValue) exeToTraced
								.get(o_cast);
						newState.getPrimitiveValue_type_Values()
								.remove(traced.getTypeSequence().get(traced.getTypeSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
								.get(o_cast);
						newState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values()
								.remove(traced.getGroup_ActivityEdgeInstanceSequence()
										.get(traced.getGroup_ActivityEdgeInstanceSequence().size() - 1));
						newState.getActivityEdgeInstance_source_Values()
								.remove(traced.getSourceSequence().get(traced.getSourceSequence().size() - 1));
						newState.getActivityEdgeInstance_target_Values()
								.remove(traced.getTargetSequence().get(traced.getTargetSequence().size() - 1));
						newState.getActivityEdgeInstance_offers_Values()
								.remove(traced.getOffersSequence().get(traced.getOffersSequence().size() - 1));
						newState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values()
								.remove(traced.getEdge_ActivityEdgeInstanceSequence()
										.get(traced.getEdge_ActivityEdgeInstanceSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Actions.BasicActions.ActionActivation) {
						fumlConfiguration.Actions.BasicActions.ActionActivation o_cast = (fumlConfiguration.Actions.BasicActions.ActionActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
								.get(o_cast);
						newState.getActionActivation_firing_Values()
								.remove(traced.getFiringSequence().get(traced.getFiringSequence().size() - 1));
						newState.getActionActivation_pinActivations_Values().remove(
								traced.getPinActivationsSequence().get(traced.getPinActivationsSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast);
						newState.getActivityNodeActivation_node_ActivityNodeActivation_Values()
								.remove(traced.getNode_ActivityNodeActivationSequence()
										.get(traced.getNode_ActivityNodeActivationSequence().size() - 1));
						newState.getActivityNodeActivation_heldTokens_Values()
								.remove(traced.getHeldTokensSequence().get(traced.getHeldTokensSequence().size() - 1));
						newState.getActivityNodeActivation_incomingEdges_Values().remove(
								traced.getIncomingEdgesSequence().get(traced.getIncomingEdgesSequence().size() - 1));
						newState.getActivityNodeActivation_isRunning_Values()
								.remove(traced.getIsRunningSequence().get(traced.getIsRunningSequence().size() - 1));
						newState.getActivityNodeActivation_running_Values()
								.remove(traced.getRunningSequence().get(traced.getRunningSequence().size() - 1));
						newState.getActivityNodeActivation_outgoingEdges_Values().remove(
								traced.getOutgoingEdgesSequence().get(traced.getOutgoingEdgesSequence().size() - 1));
						newState.getActivityNodeActivation_group_ActivityNodeActivation_Values()
								.remove(traced.getGroup_ActivityNodeActivationSequence()
										.get(traced.getGroup_ActivityNodeActivationSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.Evaluation) {
						fumlConfiguration.Classes.Kernel.Evaluation o_cast = (fumlConfiguration.Classes.Kernel.Evaluation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation) exeToTraced
								.get(o_cast);
						newState.getEvaluation_locus_Evaluation_Values().remove(traced.getLocus_EvaluationSequence()
								.get(traced.getLocus_EvaluationSequence().size() - 1));
						newState.getEvaluation_specification_Evaluation_Values()
								.remove(traced.getSpecification_EvaluationSequence()
										.get(traced.getSpecification_EvaluationSequence().size() - 1));
					}
					if (o instanceof fumlConfiguration.Loci.SemanticVisitor) {
						fumlConfiguration.Loci.SemanticVisitor o_cast = (fumlConfiguration.Loci.SemanticVisitor) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor) exeToTraced
								.get(o_cast);
						newState.getSemanticVisitor_runtimeModelElement_Values()
								.remove(traced.getRuntimeModelElementSequence()
										.get(traced.getRuntimeModelElementSequence().size() - 1));
					}
				}
				// Here we must look at non-collection mutable fields
				// We must rollback the last values from the copied state, and
				// add new values as well
				// ie. mix of remove and new
				else if (modelChange instanceof org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.NonCollectionFieldModelChange) {
					stateChanged = true;

					org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.NonCollectionFieldModelChange modelChange_cast = (org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.NonCollectionFieldModelChange) modelChange;
					org.eclipse.emf.ecore.EStructuralFeature p = modelChange_cast.getChangedField();

					if (o instanceof fumlConfiguration.Actions.BasicActions.PinActivation) {
						fumlConfiguration.Actions.BasicActions.PinActivation o_cast = (fumlConfiguration.Actions.BasicActions.PinActivation) o;

						if (p.getFeatureID() == fumlConfiguration.Actions.BasicActions.BasicActionsPackage.eINSTANCE
								.getPinActivation_ActionActivation().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.PinActivation_actionActivation_Value lastValue = traced
									.getActionActivationSequence().get(traced.getActionActivationSequence().size() - 1);
							newState.getPinActivation_actionActivation_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.PinActivation_actionActivation_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createPinActivation_actionActivation_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation value = null;
							if (o_cast.getActionActivation() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
										.get(o_cast.getActionActivation()));
							}

							newValue.setActionActivation(
									(fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) value);

							traced.getActionActivationSequence().add(newValue);
							newState.getPinActivation_actionActivation_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Actions.BasicActions.BasicActionsPackage.eINSTANCE
								.getPinActivation_Count_temp().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.PinActivation_count_temp_Value lastValue = traced
									.getCount_tempSequence().get(traced.getCount_tempSequence().size() - 1);
							newState.getPinActivation_count_temp_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.PinActivation_count_temp_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createPinActivation_count_temp_Value();

							int value = o_cast.getCount_temp();

							newValue.setCount_temp((int) value);

							traced.getCount_tempSequence().add(newValue);
							newState.getPinActivation_count_temp_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivationGroup_ActivityExecution().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityNodeActivationGroup_activityExecution_Value lastValue = traced
									.getActivityExecutionSequence()
									.get(traced.getActivityExecutionSequence().size() - 1);
							newState.getActivityNodeActivationGroup_activityExecution_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityNodeActivationGroup_activityExecution_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityNodeActivationGroup_activityExecution_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution value = null;
							if (o_cast.getActivityExecution() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) exeToTraced
										.get(o_cast.getActivityExecution()));
							}

							newValue.setActivityExecution(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) value);

							traced.getActivityExecutionSequence().add(newValue);
							newState.getActivityNodeActivationGroup_activityExecution_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ForkedToken) {
						fumlConfiguration.Activities.IntermediateActivities.ForkedToken o_cast = (fumlConfiguration.Activities.IntermediateActivities.ForkedToken) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getForkedToken_BaseToken().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ForkedToken_baseToken_Value lastValue = traced
									.getBaseTokenSequence().get(traced.getBaseTokenSequence().size() - 1);
							newState.getForkedToken_baseToken_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ForkedToken_baseToken_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createForkedToken_baseToken_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken value = null;
							if (o_cast.getBaseToken() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) exeToTraced
										.get(o_cast.getBaseToken()));
							}

							newValue.setBaseToken(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) value);

							traced.getBaseTokenSequence().add(newValue);
							newState.getForkedToken_baseToken_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getForkedToken_RemainingOffersCount().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ForkedToken_remainingOffersCount_Value lastValue = traced
									.getRemainingOffersCountSequence()
									.get(traced.getRemainingOffersCountSequence().size() - 1);
							newState.getForkedToken_remainingOffersCount_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ForkedToken_remainingOffersCount_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createForkedToken_remainingOffersCount_Value();

							int value = o_cast.getRemainingOffersCount();

							newValue.setRemainingOffersCount((int) value);

							traced.getRemainingOffersCountSequence().add(newValue);
							newState.getForkedToken_remainingOffersCount_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getForkedToken_BaseTokenIsWithdrawn().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedForkedToken) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ForkedToken_baseTokenIsWithdrawn_Value lastValue = traced
									.getBaseTokenIsWithdrawnSequence()
									.get(traced.getBaseTokenIsWithdrawnSequence().size() - 1);
							newState.getForkedToken_baseTokenIsWithdrawn_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ForkedToken_baseTokenIsWithdrawn_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createForkedToken_baseTokenIsWithdrawn_Value();

							boolean value = o_cast.isBaseTokenIsWithdrawn();

							newValue.setBaseTokenIsWithdrawn((boolean) value);

							traced.getBaseTokenIsWithdrawnSequence().add(newValue);
							newState.getForkedToken_baseTokenIsWithdrawn_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.FeatureValue) {
						fumlConfiguration.Classes.Kernel.FeatureValue o_cast = (fumlConfiguration.Classes.Kernel.FeatureValue) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getFeatureValue_Feature().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.FeatureValue_feature_Value lastValue = traced
									.getFeatureSequence().get(traced.getFeatureSequence().size() - 1);
							newState.getFeatureValue_feature_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.FeatureValue_feature_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createFeatureValue_feature_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedStructuralFeatureConfiguration value = null;
							if (o_cast.getFeature() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedStructuralFeatureConfiguration) exeToTraced
										.get(o_cast.getFeature()));
							}

							newValue.setFeature(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedStructuralFeatureConfiguration) value);

							traced.getFeatureSequence().add(newValue);
							newState.getFeatureValue_feature_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getFeatureValue_Position().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.FeatureValue_position_Value lastValue = traced
									.getPositionSequence().get(traced.getPositionSequence().size() - 1);
							newState.getFeatureValue_position_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.FeatureValue_position_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createFeatureValue_position_Value();

							int value = o_cast.getPosition();

							newValue.setPosition((int) value);

							traced.getPositionSequence().add(newValue);
							newState.getFeatureValue_position_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.IntegerValue) {
						fumlConfiguration.Classes.Kernel.IntegerValue o_cast = (fumlConfiguration.Classes.Kernel.IntegerValue) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getIntegerValue_Value_IntegerValue().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedIntegerValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedIntegerValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.IntegerValue_value_IntegerValue_Value lastValue = traced
									.getValue_IntegerValueSequence()
									.get(traced.getValue_IntegerValueSequence().size() - 1);
							newState.getIntegerValue_value_IntegerValue_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.IntegerValue_value_IntegerValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createIntegerValue_value_IntegerValue_Value();

							int value = o_cast.getValue_IntegerValue();

							newValue.setValue_IntegerValue((int) value);

							traced.getValue_IntegerValueSequence().add(newValue);
							newState.getIntegerValue_value_IntegerValue_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) o;

						if (p.getFeatureID() == fumlConfiguration.CommonBehaviors.BasicBehaviors.BasicBehaviorsPackage.eINSTANCE
								.getParameterValue_Parameter_ParameterValue().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue traced = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ParameterValue_parameter_ParameterValue_Value lastValue = traced
									.getParameter_ParameterValueSequence()
									.get(traced.getParameter_ParameterValueSequence().size() - 1);
							newState.getParameterValue_parameter_ParameterValue_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ParameterValue_parameter_ParameterValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createParameterValue_parameter_ParameterValue_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration value = null;
							if (o_cast.getParameter_ParameterValue() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration) exeToTraced
										.get(o_cast.getParameter_ParameterValue()));
							}

							newValue.setParameter_ParameterValue(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedParameterConfiguration) value);

							traced.getParameter_ParameterValueSequence().add(newValue);
							newState.getParameterValue_parameter_ParameterValue_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Input.InputParameterValues) {
						fumlConfiguration.Input.InputParameterValues o_cast = (fumlConfiguration.Input.InputParameterValues) o;

						if (p.getFeatureID() == fumlConfiguration.Input.InputPackage.eINSTANCE
								.getInputParameterValues_Name().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues traced = (fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.InputParameterValues_name_Value lastValue = traced
									.getNameSequence().get(traced.getNameSequence().size() - 1);
							newState.getInputParameterValues_name_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.InputParameterValues_name_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createInputParameterValues_name_Value();

							java.lang.String value = o_cast.getName();

							newValue.setName((java.lang.String) value);

							traced.getNameSequence().add(newValue);
							newState.getInputParameterValues_name_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Loci.Executor) {
						fumlConfiguration.Loci.Executor o_cast = (fumlConfiguration.Loci.Executor) o;

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getExecutor_Locus_Executor().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Executor_locus_Executor_Value lastValue = traced
									.getLocus_ExecutorSequence().get(traced.getLocus_ExecutorSequence().size() - 1);
							newState.getExecutor_locus_Executor_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Executor_locus_Executor_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createExecutor_locus_Executor_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus value = null;
							if (o_cast.getLocus_Executor() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
										.get(o_cast.getLocus_Executor()));
							}

							newValue.setLocus_Executor(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) value);

							traced.getLocus_ExecutorSequence().add(newValue);
							newState.getExecutor_locus_Executor_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) {
						fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation o_cast = (fumlConfiguration.Activities.IntermediateActivities.ObjectNodeActivation) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getObjectNodeActivation_OfferedTokenCount().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectNodeActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ObjectNodeActivation_offeredTokenCount_Value lastValue = traced
									.getOfferedTokenCountSequence()
									.get(traced.getOfferedTokenCountSequence().size() - 1);
							newState.getObjectNodeActivation_offeredTokenCount_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ObjectNodeActivation_offeredTokenCount_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createObjectNodeActivation_offeredTokenCount_Value();

							int value = o_cast.getOfferedTokenCount();

							newValue.setOfferedTokenCount((int) value);

							traced.getOfferedTokenCountSequence().add(newValue);
							newState.getObjectNodeActivation_offeredTokenCount_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Loci.ExecutionFactory) {
						fumlConfiguration.Loci.ExecutionFactory o_cast = (fumlConfiguration.Loci.ExecutionFactory) o;

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getExecutionFactory_Locus_ExecutionFactory().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ExecutionFactory_locus_ExecutionFactory_Value lastValue = traced
									.getLocus_ExecutionFactorySequence()
									.get(traced.getLocus_ExecutionFactorySequence().size() - 1);
							newState.getExecutionFactory_locus_ExecutionFactory_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ExecutionFactory_locus_ExecutionFactory_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createExecutionFactory_locus_ExecutionFactory_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus value = null;
							if (o_cast.getLocus_ExecutionFactory() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
										.get(o_cast.getLocus_ExecutionFactory()));
							}

							newValue.setLocus_ExecutionFactory(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) value);

							traced.getLocus_ExecutionFactorySequence().add(newValue);
							newState.getExecutionFactory_locus_ExecutionFactory_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.BooleanValue) {
						fumlConfiguration.Classes.Kernel.BooleanValue o_cast = (fumlConfiguration.Classes.Kernel.BooleanValue) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getBooleanValue_Value_BooleanValue().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedBooleanValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedBooleanValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.BooleanValue_value_BooleanValue_Value lastValue = traced
									.getValue_BooleanValueSequence()
									.get(traced.getValue_BooleanValueSequence().size() - 1);
							newState.getBooleanValue_value_BooleanValue_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.BooleanValue_value_BooleanValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createBooleanValue_value_BooleanValue_Value();

							boolean value = o_cast.isValue_BooleanValue();

							newValue.setValue_BooleanValue((boolean) value);

							traced.getValue_BooleanValueSequence().add(newValue);
							newState.getBooleanValue_value_BooleanValue_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Loci.Locus) {
						fumlConfiguration.Loci.Locus o_cast = (fumlConfiguration.Loci.Locus) o;

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE.getLocus_Factory()
								.getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Locus_factory_Value lastValue = traced.getFactorySequence()
									.get(traced.getFactorySequence().size() - 1);
							newState.getLocus_factory_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Locus_factory_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createLocus_factory_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory value = null;
							if (o_cast.getFactory() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) exeToTraced
										.get(o_cast.getFactory()));
							}

							newValue.setFactory(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) value);

							traced.getFactorySequence().add(newValue);
							newState.getLocus_factory_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE.getLocus_Executor()
								.getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Locus_executor_Value lastValue = traced.getExecutorSequence()
									.get(traced.getExecutorSequence().size() - 1);
							newState.getLocus_executor_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Locus_executor_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createLocus_executor_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor value = null;
							if (o_cast.getExecutor() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) exeToTraced
										.get(o_cast.getExecutor()));
							}

							newValue.setExecutor(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutor) value);

							traced.getExecutorSequence().add(newValue);
							newState.getLocus_executor_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityExecution o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityExecution) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityExecution_ActivationGroup().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityExecution) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityExecution_activationGroup_Value lastValue = traced
									.getActivationGroupSequence().get(traced.getActivationGroupSequence().size() - 1);
							newState.getActivityExecution_activationGroup_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityExecution_activationGroup_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityExecution_activationGroup_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup value = null;
							if (o_cast.getActivationGroup() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
										.get(o_cast.getActivationGroup()));
							}

							newValue.setActivationGroup(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) value);

							traced.getActivationGroupSequence().add(newValue);
							newState.getActivityExecution_activationGroup_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.Reference) {
						fumlConfiguration.Classes.Kernel.Reference o_cast = (fumlConfiguration.Classes.Kernel.Reference) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getReference_Referent().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedReference traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedReference) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Reference_referent_Value lastValue = traced
									.getReferentSequence().get(traced.getReferentSequence().size() - 1);
							newState.getReference_referent_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Reference_referent_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createReference_referent_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject value = null;
							if (o_cast.getReferent() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
										.get(o_cast.getReferent()));
							}

							newValue.setReferent(
									(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) value);

							traced.getReferentSequence().add(newValue);
							newState.getReference_referent_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ObjectToken) {
						fumlConfiguration.Activities.IntermediateActivities.ObjectToken o_cast = (fumlConfiguration.Activities.IntermediateActivities.ObjectToken) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getObjectToken_Value().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedObjectToken) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ObjectToken_value_Value lastValue = traced.getValueSequence()
									.get(traced.getValueSequence().size() - 1);
							newState.getObjectToken_value_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ObjectToken_value_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createObjectToken_value_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue value = null;
							if (o_cast.getValue() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue) exeToTraced
										.get(o_cast.getValue()));
							}

							newValue.setValue(
									(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue) value);

							traced.getValueSequence().add(newValue);
							newState.getObjectToken_value_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Token) {
						fumlConfiguration.Activities.IntermediateActivities.Token o_cast = (fumlConfiguration.Activities.IntermediateActivities.Token) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getToken_Holder().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Token_holder_Value lastValue = traced.getHolderSequence()
									.get(traced.getHolderSequence().size() - 1);
							newState.getToken_holder_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Token_holder_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createToken_holder_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation value = null;
							if (o_cast.getHolder() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
										.get(o_cast.getHolder()));
							}

							newValue.setHolder(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) value);

							traced.getHolderSequence().add(newValue);
							newState.getToken_holder_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) o;

						if (p.getFeatureID() == fumlConfiguration.CommonBehaviors.BasicBehaviors.BasicBehaviorsPackage.eINSTANCE
								.getExecution_Context().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution traced = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Execution_context_Value lastValue = traced
									.getContextSequence().get(traced.getContextSequence().size() - 1);
							newState.getExecution_context_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Execution_context_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createExecution_context_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject value = null;
							if (o_cast.getContext() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
										.get(o_cast.getContext()));
							}

							newValue.setContext(
									(fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) value);

							traced.getContextSequence().add(newValue);
							newState.getExecution_context_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.ExtensionalValue) {
						fumlConfiguration.Classes.Kernel.ExtensionalValue o_cast = (fumlConfiguration.Classes.Kernel.ExtensionalValue) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getExtensionalValue_Locus_ExtensionalValue().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value lastValue = traced
									.getLocus_ExtensionalValueSequence()
									.get(traced.getLocus_ExtensionalValueSequence().size() - 1);
							newState.getExtensionalValue_locus_ExtensionalValue_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ExtensionalValue_locus_ExtensionalValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createExtensionalValue_locus_ExtensionalValue_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus value = null;
							if (o_cast.getLocus_ExtensionalValue() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
										.get(o_cast.getLocus_ExtensionalValue()));
							}

							newValue.setLocus_ExtensionalValue(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) value);

							traced.getLocus_ExtensionalValueSequence().add(newValue);
							newState.getExtensionalValue_locus_ExtensionalValue_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.PrimitiveValue) {
						fumlConfiguration.Classes.Kernel.PrimitiveValue o_cast = (fumlConfiguration.Classes.Kernel.PrimitiveValue) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getPrimitiveValue_Type().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedPrimitiveValue traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedPrimitiveValue) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.PrimitiveValue_type_Value lastValue = traced.getTypeSequence()
									.get(traced.getTypeSequence().size() - 1);
							newState.getPrimitiveValue_type_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.PrimitiveValue_type_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createPrimitiveValue_type_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration value = null;
							if (o_cast.getType() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) exeToTraced
										.get(o_cast.getType()));
							}

							newValue.setType(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration) value);

							traced.getTypeSequence().add(newValue);
							newState.getPrimitiveValue_type_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Loci.ExecutionEnvironment) {
						fumlConfiguration.Loci.ExecutionEnvironment o_cast = (fumlConfiguration.Loci.ExecutionEnvironment) o;

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getExecutionEnvironment_Locus_ExecutionEnvironment().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionEnvironment traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionEnvironment) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ExecutionEnvironment_locus_ExecutionEnvironment_Value lastValue = traced
									.getLocus_ExecutionEnvironmentSequence()
									.get(traced.getLocus_ExecutionEnvironmentSequence().size() - 1);
							newState.getExecutionEnvironment_locus_ExecutionEnvironment_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ExecutionEnvironment_locus_ExecutionEnvironment_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createExecutionEnvironment_locus_ExecutionEnvironment_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus value = null;
							if (o_cast.getLocus_ExecutionEnvironment() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
										.get(o_cast.getLocus_ExecutionEnvironment()));
							}

							newValue.setLocus_ExecutionEnvironment(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) value);

							traced.getLocus_ExecutionEnvironmentSequence().add(newValue);
							newState.getExecutionEnvironment_locus_ExecutionEnvironment_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityEdgeInstance_Group_ActivityEdgeInstance().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityEdgeInstance_group_ActivityEdgeInstance_Value lastValue = traced
									.getGroup_ActivityEdgeInstanceSequence()
									.get(traced.getGroup_ActivityEdgeInstanceSequence().size() - 1);
							newState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityEdgeInstance_group_ActivityEdgeInstance_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityEdgeInstance_group_ActivityEdgeInstance_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup value = null;
							if (o_cast.getGroup_ActivityEdgeInstance() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
										.get(o_cast.getGroup_ActivityEdgeInstance()));
							}

							newValue.setGroup_ActivityEdgeInstance(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) value);

							traced.getGroup_ActivityEdgeInstanceSequence().add(newValue);
							newState.getActivityEdgeInstance_group_ActivityEdgeInstance_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityEdgeInstance_Source().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityEdgeInstance_source_Value lastValue = traced
									.getSourceSequence().get(traced.getSourceSequence().size() - 1);
							newState.getActivityEdgeInstance_source_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityEdgeInstance_source_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityEdgeInstance_source_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation value = null;
							if (o_cast.getSource() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
										.get(o_cast.getSource()));
							}

							newValue.setSource(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) value);

							traced.getSourceSequence().add(newValue);
							newState.getActivityEdgeInstance_source_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityEdgeInstance_Target().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityEdgeInstance_target_Value lastValue = traced
									.getTargetSequence().get(traced.getTargetSequence().size() - 1);
							newState.getActivityEdgeInstance_target_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityEdgeInstance_target_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityEdgeInstance_target_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation value = null;
							if (o_cast.getTarget() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
										.get(o_cast.getTarget()));
							}

							newValue.setTarget(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) value);

							traced.getTargetSequence().add(newValue);
							newState.getActivityEdgeInstance_target_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityEdgeInstance_Edge_ActivityEdgeInstance().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityEdgeInstance_edge_ActivityEdgeInstance_Value lastValue = traced
									.getEdge_ActivityEdgeInstanceSequence()
									.get(traced.getEdge_ActivityEdgeInstanceSequence().size() - 1);
							newState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityEdgeInstance_edge_ActivityEdgeInstance_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityEdgeInstance_edge_ActivityEdgeInstance_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration value = null;
							if (o_cast.getEdge_ActivityEdgeInstance() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration) exeToTraced
										.get(o_cast.getEdge_ActivityEdgeInstance()));
							}

							newValue.setEdge_ActivityEdgeInstance(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityEdgeConfiguration) value);

							traced.getEdge_ActivityEdgeInstanceSequence().add(newValue);
							newState.getActivityEdgeInstance_edge_ActivityEdgeInstance_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Classes.Kernel.Evaluation) {
						fumlConfiguration.Classes.Kernel.Evaluation o_cast = (fumlConfiguration.Classes.Kernel.Evaluation) o;

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getEvaluation_Locus_Evaluation().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Evaluation_locus_Evaluation_Value lastValue = traced
									.getLocus_EvaluationSequence().get(traced.getLocus_EvaluationSequence().size() - 1);
							newState.getEvaluation_locus_Evaluation_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Evaluation_locus_Evaluation_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createEvaluation_locus_Evaluation_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus value = null;
							if (o_cast.getLocus_Evaluation() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
										.get(o_cast.getLocus_Evaluation()));
							}

							newValue.setLocus_Evaluation(
									(fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) value);

							traced.getLocus_EvaluationSequence().add(newValue);
							newState.getEvaluation_locus_Evaluation_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getEvaluation_Specification_Evaluation().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation traced = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedEvaluation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.Evaluation_specification_Evaluation_Value lastValue = traced
									.getSpecification_EvaluationSequence()
									.get(traced.getSpecification_EvaluationSequence().size() - 1);
							newState.getEvaluation_specification_Evaluation_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.Evaluation_specification_Evaluation_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createEvaluation_specification_Evaluation_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration value = null;
							if (o_cast.getSpecification_Evaluation() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) exeToTraced
										.get(o_cast.getSpecification_Evaluation()));
							}

							newValue.setSpecification_Evaluation(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedValueSpecificationConfiguration) value);

							traced.getSpecification_EvaluationSequence().add(newValue);
							newState.getEvaluation_specification_Evaluation_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Actions.BasicActions.ActionActivation) {
						fumlConfiguration.Actions.BasicActions.ActionActivation o_cast = (fumlConfiguration.Actions.BasicActions.ActionActivation) o;

						if (p.getFeatureID() == fumlConfiguration.Actions.BasicActions.BasicActionsPackage.eINSTANCE
								.getActionActivation_Firing().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActionActivation_firing_Value lastValue = traced
									.getFiringSequence().get(traced.getFiringSequence().size() - 1);
							newState.getActionActivation_firing_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActionActivation_firing_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActionActivation_firing_Value();

							boolean value = o_cast.isFiring();

							newValue.setFiring((boolean) value);

							traced.getFiringSequence().add(newValue);
							newState.getActionActivation_firing_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o;

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivation_Node_ActivityNodeActivation().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value lastValue = traced
									.getNode_ActivityNodeActivationSequence()
									.get(traced.getNode_ActivityNodeActivationSequence().size() - 1);
							newState.getActivityNodeActivation_node_ActivityNodeActivation_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityNodeActivation_node_ActivityNodeActivation_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityNodeActivation_node_ActivityNodeActivation_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration value = null;
							if (o_cast.getNode_ActivityNodeActivation() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) exeToTraced
										.get(o_cast.getNode_ActivityNodeActivation()));
							}

							newValue.setNode_ActivityNodeActivation(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedActivityNodeConfiguration) value);

							traced.getNode_ActivityNodeActivationSequence().add(newValue);
							newState.getActivityNodeActivation_node_ActivityNodeActivation_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivation_IsRunning().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value lastValue = traced
									.getIsRunningSequence().get(traced.getIsRunningSequence().size() - 1);
							newState.getActivityNodeActivation_isRunning_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityNodeActivation_isRunning_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityNodeActivation_isRunning_Value();

							boolean value = o_cast.isIsRunning();

							newValue.setIsRunning((boolean) value);

							traced.getIsRunningSequence().add(newValue);
							newState.getActivityNodeActivation_isRunning_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivation_Running().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityNodeActivation_running_Value lastValue = traced
									.getRunningSequence().get(traced.getRunningSequence().size() - 1);
							newState.getActivityNodeActivation_running_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityNodeActivation_running_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityNodeActivation_running_Value();

							boolean value = o_cast.isRunning();

							newValue.setRunning((boolean) value);

							traced.getRunningSequence().add(newValue);
							newState.getActivityNodeActivation_running_Values().add(newValue);
						} else

						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivation_Group_ActivityNodeActivation().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation traced = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value lastValue = traced
									.getGroup_ActivityNodeActivationSequence()
									.get(traced.getGroup_ActivityNodeActivationSequence().size() - 1);
							newState.getActivityNodeActivation_group_ActivityNodeActivation_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.ActivityNodeActivation_group_ActivityNodeActivation_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createActivityNodeActivation_group_ActivityNodeActivation_Value();

							fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup value = null;
							if (o_cast.getGroup_ActivityNodeActivation() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
										.get(o_cast.getGroup_ActivityNodeActivation()));
							}

							newValue.setGroup_ActivityNodeActivation(
									(fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) value);

							traced.getGroup_ActivityNodeActivationSequence().add(newValue);
							newState.getActivityNodeActivation_group_ActivityNodeActivation_Values().add(newValue);
						}
					}

					if (o instanceof fumlConfiguration.Loci.SemanticVisitor) {
						fumlConfiguration.Loci.SemanticVisitor o_cast = (fumlConfiguration.Loci.SemanticVisitor) o;

						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getSemanticVisitor_RuntimeModelElement().getFeatureID()) {

							// Rollback: we remove the last value of this field
							// from the new state
							fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor traced = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor) exeToTraced
									.get(o);
							fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value lastValue = traced
									.getRuntimeModelElementSequence()
									.get(traced.getRuntimeModelElementSequence().size() - 1);
							newState.getSemanticVisitor_runtimeModelElement_Values().remove(lastValue);

							// And we create a proper new value
							fumlConfigurationTrace.States.SemanticVisitor_runtimeModelElement_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
									.createSemanticVisitor_runtimeModelElement_Value();

							fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration value = null;
							if (o_cast.getRuntimeModelElement() != null) {
								value = ((fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
										.get(o_cast.getRuntimeModelElement()));
							}

							newValue.setRuntimeModelElement(
									(fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) value);

							traced.getRuntimeModelElementSequence().add(newValue);
							newState.getSemanticVisitor_runtimeModelElement_Values().add(newValue);
						}
					}
				}
				// Here we look at collection mutable fields
				// We must first manually find out if the collection changed...
				// If it changed we must rollback the last values from the
				// copied state, and add new values as well
				else if (modelChange instanceof org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.PotentialCollectionFieldModelChange) {
					org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.PotentialCollectionFieldModelChange modelChange_cast = (org.eclipse.gemoc.xdsmlframework.api.engine_addon.modelchangelistener.PotentialCollectionFieldModelChange) modelChange;
					org.eclipse.emf.ecore.EStructuralFeature p = modelChange_cast.getChangedField();
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivationGroup) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivationGroup) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivationGroup_EdgeInstances().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityNodeActivationGroup_edgeInstances_Value> valueSequence = tracedObject
									.getEdgeInstancesSequence();
							fumlConfigurationTrace.States.ActivityNodeActivationGroup_edgeInstances_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
									.getEdgeInstances()) {
								addNewObjectToState(
										(fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getEdgeInstances().size() == o_cast.getEdgeInstances().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance> it = o_cast
											.getEdgeInstances().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance aPreviousValue : previousValue
											.getEdgeInstances()) {
										fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityNodeActivationGroup_edgeInstances_Value lastValue = tracedObject
										.getEdgeInstancesSequence()
										.get(tracedObject.getEdgeInstancesSequence().size() - 1);
								newState.getActivityNodeActivationGroup_edgeInstances_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityNodeActivationGroup_edgeInstances_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityNodeActivationGroup_edgeInstances_Value();
								newValue.getEdgeInstances()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
												o_cast.getEdgeInstances(), newState));
								tracedObject.getEdgeInstancesSequence().add(newValue);
								newState.getActivityNodeActivationGroup_edgeInstances_Values().add(newValue);
							}
						} else if (p
								.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
										.getActivityNodeActivationGroup_NodeActivations().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityNodeActivationGroup_nodeActivations_Value> valueSequence = tracedObject
									.getNodeActivationsSequence();
							fumlConfigurationTrace.States.ActivityNodeActivationGroup_nodeActivations_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation aValue : o_cast
									.getNodeActivations()) {
								addNewObjectToState(
										(fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getNodeActivations().size() == o_cast.getNodeActivations().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation> it = o_cast
											.getNodeActivations().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation aPreviousValue : previousValue
											.getNodeActivations()) {
										fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityNodeActivationGroup_nodeActivations_Value lastValue = tracedObject
										.getNodeActivationsSequence()
										.get(tracedObject.getNodeActivationsSequence().size() - 1);
								newState.getActivityNodeActivationGroup_nodeActivations_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityNodeActivationGroup_nodeActivations_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityNodeActivationGroup_nodeActivations_Value();
								newValue.getNodeActivations()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation>) getExeToTraced(
												o_cast.getNodeActivations(), newState));
								tracedObject.getNodeActivationsSequence().add(newValue);
								newState.getActivityNodeActivationGroup_nodeActivations_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.ElementConfiguration) {
						fumlConfiguration.ElementConfiguration o_cast = (fumlConfiguration.ElementConfiguration) o;
						fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.TracedElementConfiguration) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.FumlConfigurationPackage.eINSTANCE
								.getElementConfiguration_SemanticVisitor().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value> valueSequence = tracedObject
									.getSemanticVisitorSequence();
							fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Loci.SemanticVisitor aValue : o_cast.getSemanticVisitor()) {
								addNewObjectToState((fumlConfiguration.Loci.SemanticVisitor) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getSemanticVisitor().size() == o_cast.getSemanticVisitor().size()) {
									java.util.Iterator<fumlConfiguration.Loci.SemanticVisitor> it = o_cast
											.getSemanticVisitor().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor aPreviousValue : previousValue
											.getSemanticVisitor()) {
										fumlConfiguration.Loci.SemanticVisitor aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value lastValue = tracedObject
										.getSemanticVisitorSequence()
										.get(tracedObject.getSemanticVisitorSequence().size() - 1);
								newState.getElementConfiguration_semanticVisitor_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ElementConfiguration_semanticVisitor_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createElementConfiguration_semanticVisitor_Value();
								newValue.getSemanticVisitor()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedSemanticVisitor>) getExeToTraced(
												o_cast.getSemanticVisitor(), newState));
								tracedObject.getSemanticVisitorSequence().add(newValue);
								newState.getElementConfiguration_semanticVisitor_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.FeatureValue) {
						fumlConfiguration.Classes.Kernel.FeatureValue o_cast = (fumlConfiguration.Classes.Kernel.FeatureValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getFeatureValue_Values_FeatureValue().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.FeatureValue_values_FeatureValue_Value> valueSequence = tracedObject
									.getValues_FeatureValueSequence();
							fumlConfigurationTrace.States.FeatureValue_values_FeatureValue_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Classes.Kernel.Value aValue : o_cast.getValues_FeatureValue()) {
								addNewObjectToState((fumlConfiguration.Classes.Kernel.Value) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getValues_FeatureValue().size() == o_cast.getValues_FeatureValue()
										.size()) {
									java.util.Iterator<fumlConfiguration.Classes.Kernel.Value> it = o_cast
											.getValues_FeatureValue().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue aPreviousValue : previousValue
											.getValues_FeatureValue()) {
										fumlConfiguration.Classes.Kernel.Value aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.FeatureValue_values_FeatureValue_Value lastValue = tracedObject
										.getValues_FeatureValueSequence()
										.get(tracedObject.getValues_FeatureValueSequence().size() - 1);
								newState.getFeatureValue_values_FeatureValue_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.FeatureValue_values_FeatureValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createFeatureValue_values_FeatureValue_Value();
								newValue.getValues_FeatureValue()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue>) getExeToTraced(
												o_cast.getValues_FeatureValue(), newState));
								tracedObject.getValues_FeatureValueSequence().add(newValue);
								newState.getFeatureValue_values_FeatureValue_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.CommonBehaviors.BasicBehaviors.BasicBehaviorsPackage.eINSTANCE
								.getParameterValue_Values_ParameterValue().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ParameterValue_values_ParameterValue_Value> valueSequence = tracedObject
									.getValues_ParameterValueSequence();
							fumlConfigurationTrace.States.ParameterValue_values_ParameterValue_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Classes.Kernel.Value aValue : o_cast.getValues_ParameterValue()) {
								addNewObjectToState((fumlConfiguration.Classes.Kernel.Value) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getValues_ParameterValue().size() == o_cast.getValues_ParameterValue()
										.size()) {
									java.util.Iterator<fumlConfiguration.Classes.Kernel.Value> it = o_cast
											.getValues_ParameterValue().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue aPreviousValue : previousValue
											.getValues_ParameterValue()) {
										fumlConfiguration.Classes.Kernel.Value aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ParameterValue_values_ParameterValue_Value lastValue = tracedObject
										.getValues_ParameterValueSequence()
										.get(tracedObject.getValues_ParameterValueSequence().size() - 1);
								newState.getParameterValue_values_ParameterValue_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ParameterValue_values_ParameterValue_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createParameterValue_values_ParameterValue_Value();
								newValue.getValues_ParameterValue()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedValue>) getExeToTraced(
												o_cast.getValues_ParameterValue(), newState));
								tracedObject.getValues_ParameterValueSequence().add(newValue);
								newState.getParameterValue_values_ParameterValue_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Input.InputParameterValues) {
						fumlConfiguration.Input.InputParameterValues o_cast = (fumlConfiguration.Input.InputParameterValues) o;
						fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Input.TracedInputParameterValues) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Input.InputPackage.eINSTANCE
								.getInputParameterValues_ParameterValues().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.InputParameterValues_parameterValues_Value> valueSequence = tracedObject
									.getParameterValuesSequence();
							fumlConfigurationTrace.States.InputParameterValues_parameterValues_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast
									.getParameterValues()) {
								addNewObjectToState(
										(fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getParameterValues().size() == o_cast.getParameterValues().size()) {
									java.util.Iterator<fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue> it = o_cast
											.getParameterValues().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue aPreviousValue : previousValue
											.getParameterValues()) {
										fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.InputParameterValues_parameterValues_Value lastValue = tracedObject
										.getParameterValuesSequence()
										.get(tracedObject.getParameterValuesSequence().size() - 1);
								newState.getInputParameterValues_parameterValues_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.InputParameterValues_parameterValues_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createInputParameterValues_parameterValues_Value();
								newValue.getParameterValues()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
												o_cast.getParameterValues(), newState));
								tracedObject.getParameterValuesSequence().add(newValue);
								newState.getInputParameterValues_parameterValues_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Loci.ExecutionFactory) {
						fumlConfiguration.Loci.ExecutionFactory o_cast = (fumlConfiguration.Loci.ExecutionFactory) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedExecutionFactory) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getExecutionFactory_PrimitiveBehaviorPrototypes().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ExecutionFactory_primitiveBehaviorPrototypes_Value> valueSequence = tracedObject
									.getPrimitiveBehaviorPrototypesSequence();
							fumlConfigurationTrace.States.ExecutionFactory_primitiveBehaviorPrototypes_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution aValue : o_cast
									.getPrimitiveBehaviorPrototypes()) {
								addNewObjectToState(
										(fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getPrimitiveBehaviorPrototypes().size() == o_cast
										.getPrimitiveBehaviorPrototypes().size()) {
									java.util.Iterator<fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution> it = o_cast
											.getPrimitiveBehaviorPrototypes().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedOpaqueBehaviorExecution aPreviousValue : previousValue
											.getPrimitiveBehaviorPrototypes()) {
										fumlConfiguration.CommonBehaviors.BasicBehaviors.OpaqueBehaviorExecution aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ExecutionFactory_primitiveBehaviorPrototypes_Value lastValue = tracedObject
										.getPrimitiveBehaviorPrototypesSequence()
										.get(tracedObject.getPrimitiveBehaviorPrototypesSequence().size() - 1);
								newState.getExecutionFactory_primitiveBehaviorPrototypes_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ExecutionFactory_primitiveBehaviorPrototypes_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createExecutionFactory_primitiveBehaviorPrototypes_Value();
								newValue.getPrimitiveBehaviorPrototypes()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedOpaqueBehaviorExecution>) getExeToTraced(
												o_cast.getPrimitiveBehaviorPrototypes(), newState));
								tracedObject.getPrimitiveBehaviorPrototypesSequence().add(newValue);
								newState.getExecutionFactory_primitiveBehaviorPrototypes_Values().add(newValue);
							}
						} else if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getExecutionFactory_BuiltInTypes().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ExecutionFactory_builtInTypes_Value> valueSequence = tracedObject
									.getBuiltInTypesSequence();
							fumlConfigurationTrace.States.ExecutionFactory_builtInTypes_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (org.eclipse.uml2.uml.PrimitiveType aValue : o_cast.getBuiltInTypes()) {
								addNewObjectToState((fumlConfiguration.PrimitiveTypeConfiguration) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getBuiltInTypes().size() == o_cast.getBuiltInTypes().size()) {
									java.util.Iterator<org.eclipse.uml2.uml.PrimitiveType> it = o_cast.getBuiltInTypes()
											.iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration aPreviousValue : previousValue
											.getBuiltInTypes()) {
										org.eclipse.uml2.uml.PrimitiveType aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ExecutionFactory_builtInTypes_Value lastValue = tracedObject
										.getBuiltInTypesSequence()
										.get(tracedObject.getBuiltInTypesSequence().size() - 1);
								newState.getExecutionFactory_builtInTypes_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ExecutionFactory_builtInTypes_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createExecutionFactory_builtInTypes_Value();
								newValue.getBuiltInTypes()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedPrimitiveTypeConfiguration>) getExeToTraced(
												o_cast.getBuiltInTypes(), newState));
								tracedObject.getBuiltInTypesSequence().add(newValue);
								newState.getExecutionFactory_builtInTypes_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.Offer) {
						fumlConfiguration.Activities.IntermediateActivities.Offer o_cast = (fumlConfiguration.Activities.IntermediateActivities.Offer) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getOffer_OfferedTokens().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.Offer_offeredTokens_Value> valueSequence = tracedObject
									.getOfferedTokensSequence();
							fumlConfigurationTrace.States.Offer_offeredTokens_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast
									.getOfferedTokens()) {
								addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getOfferedTokens().size() == o_cast.getOfferedTokens().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.Token> it = o_cast
											.getOfferedTokens().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken aPreviousValue : previousValue
											.getOfferedTokens()) {
										fumlConfiguration.Activities.IntermediateActivities.Token aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.Offer_offeredTokens_Value lastValue = tracedObject
										.getOfferedTokensSequence()
										.get(tracedObject.getOfferedTokensSequence().size() - 1);
								newState.getOffer_offeredTokens_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.Offer_offeredTokens_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createOffer_offeredTokens_Value();
								newValue.getOfferedTokens()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
												o_cast.getOfferedTokens(), newState));
								tracedObject.getOfferedTokensSequence().add(newValue);
								newState.getOffer_offeredTokens_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Loci.Locus) {
						fumlConfiguration.Loci.Locus o_cast = (fumlConfiguration.Loci.Locus) o;
						fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Loci.TracedLocus) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Loci.LociPackage.eINSTANCE
								.getLocus_ExtensionalValues().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.Locus_extensionalValues_Value> valueSequence = tracedObject
									.getExtensionalValuesSequence();
							fumlConfigurationTrace.States.Locus_extensionalValues_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Classes.Kernel.ExtensionalValue aValue : o_cast
									.getExtensionalValues()) {
								addNewObjectToState((fumlConfiguration.Classes.Kernel.ExtensionalValue) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getExtensionalValues().size() == o_cast.getExtensionalValues()
										.size()) {
									java.util.Iterator<fumlConfiguration.Classes.Kernel.ExtensionalValue> it = o_cast
											.getExtensionalValues().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue aPreviousValue : previousValue
											.getExtensionalValues()) {
										fumlConfiguration.Classes.Kernel.ExtensionalValue aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.Locus_extensionalValues_Value lastValue = tracedObject
										.getExtensionalValuesSequence()
										.get(tracedObject.getExtensionalValuesSequence().size() - 1);
								newState.getLocus_extensionalValues_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.Locus_extensionalValues_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createLocus_extensionalValues_Value();
								newValue.getExtensionalValues()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedExtensionalValue>) getExeToTraced(
												o_cast.getExtensionalValues(), newState));
								tracedObject.getExtensionalValuesSequence().add(newValue);
								newState.getLocus_extensionalValues_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Actions.BasicActions.CallActionActivation) {
						fumlConfiguration.Actions.BasicActions.CallActionActivation o_cast = (fumlConfiguration.Actions.BasicActions.CallActionActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedCallActionActivation tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedCallActionActivation) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Actions.BasicActions.BasicActionsPackage.eINSTANCE
								.getCallActionActivation_CallExecutions().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.CallActionActivation_callExecutions_Value> valueSequence = tracedObject
									.getCallExecutionsSequence();
							fumlConfigurationTrace.States.CallActionActivation_callExecutions_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution aValue : o_cast
									.getCallExecutions()) {
								addNewObjectToState((fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getCallExecutions().size() == o_cast.getCallExecutions().size()) {
									java.util.Iterator<fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution> it = o_cast
											.getCallExecutions().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution aPreviousValue : previousValue
											.getCallExecutions()) {
										fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.CallActionActivation_callExecutions_Value lastValue = tracedObject
										.getCallExecutionsSequence()
										.get(tracedObject.getCallExecutionsSequence().size() - 1);
								newState.getCallActionActivation_callExecutions_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.CallActionActivation_callExecutions_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createCallActionActivation_callExecutions_Value();
								newValue.getCallExecutions()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution>) getExeToTraced(
												o_cast.getCallExecutions(), newState));
								tracedObject.getCallExecutionsSequence().add(newValue);
								newState.getCallActionActivation_callExecutions_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) {
						fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution o_cast = (fumlConfiguration.CommonBehaviors.BasicBehaviors.Execution) o;
						fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedExecution) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.CommonBehaviors.BasicBehaviors.BasicBehaviorsPackage.eINSTANCE
								.getExecution_ParameterValues().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.Execution_parameterValues_Value> valueSequence = tracedObject
									.getParameterValuesSequence();
							fumlConfigurationTrace.States.Execution_parameterValues_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aValue : o_cast
									.getParameterValues()) {
								addNewObjectToState(
										(fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getParameterValues().size() == o_cast.getParameterValues().size()) {
									java.util.Iterator<fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue> it = o_cast
											.getParameterValues().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue aPreviousValue : previousValue
											.getParameterValues()) {
										fumlConfiguration.CommonBehaviors.BasicBehaviors.ParameterValue aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.Execution_parameterValues_Value lastValue = tracedObject
										.getParameterValuesSequence()
										.get(tracedObject.getParameterValuesSequence().size() - 1);
								newState.getExecution_parameterValues_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.Execution_parameterValues_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createExecution_parameterValues_Value();
								newValue.getParameterValues()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.CommonBehaviors.BasicBehaviors.TracedParameterValue>) getExeToTraced(
												o_cast.getParameterValues(), newState));
								tracedObject.getParameterValuesSequence().add(newValue);
								newState.getExecution_parameterValues_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.Object) {
						fumlConfiguration.Classes.Kernel.Object o_cast = (fumlConfiguration.Classes.Kernel.Object) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedObject) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getObject_Types().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.Object_types_Value> valueSequence = tracedObject
									.getTypesSequence();
							fumlConfigurationTrace.States.Object_types_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (org.eclipse.uml2.uml.Class aValue : o_cast.getTypes()) {
								addNewObjectToState((fumlConfiguration.ClassConfiguration) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getTypes().size() == o_cast.getTypes().size()) {
									java.util.Iterator<org.eclipse.uml2.uml.Class> it = o_cast.getTypes().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration aPreviousValue : previousValue
											.getTypes()) {
										org.eclipse.uml2.uml.Class aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.Object_types_Value lastValue = tracedObject
										.getTypesSequence().get(tracedObject.getTypesSequence().size() - 1);
								newState.getObject_types_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.Object_types_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createObject_types_Value();
								newValue.getTypes()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.TracedClassConfiguration>) getExeToTraced(
												o_cast.getTypes(), newState));
								tracedObject.getTypesSequence().add(newValue);
								newState.getObject_types_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Classes.Kernel.CompoundValue) {
						fumlConfiguration.Classes.Kernel.CompoundValue o_cast = (fumlConfiguration.Classes.Kernel.CompoundValue) o;
						fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedCompoundValue tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedCompoundValue) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Classes.Kernel.KernelPackage.eINSTANCE
								.getCompoundValue_FeatureValues().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.CompoundValue_featureValues_Value> valueSequence = tracedObject
									.getFeatureValuesSequence();
							fumlConfigurationTrace.States.CompoundValue_featureValues_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Classes.Kernel.FeatureValue aValue : o_cast.getFeatureValues()) {
								addNewObjectToState((fumlConfiguration.Classes.Kernel.FeatureValue) aValue, newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getFeatureValues().size() == o_cast.getFeatureValues().size()) {
									java.util.Iterator<fumlConfiguration.Classes.Kernel.FeatureValue> it = o_cast
											.getFeatureValues().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue aPreviousValue : previousValue
											.getFeatureValues()) {
										fumlConfiguration.Classes.Kernel.FeatureValue aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.CompoundValue_featureValues_Value lastValue = tracedObject
										.getFeatureValuesSequence()
										.get(tracedObject.getFeatureValuesSequence().size() - 1);
								newState.getCompoundValue_featureValues_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.CompoundValue_featureValues_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createCompoundValue_featureValues_Value();
								newValue.getFeatureValues()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Classes.Kernel.TracedFeatureValue>) getExeToTraced(
												o_cast.getFeatureValues(), newState));
								tracedObject.getFeatureValuesSequence().add(newValue);
								newState.getCompoundValue_featureValues_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityEdgeInstance_Offers().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityEdgeInstance_offers_Value> valueSequence = tracedObject
									.getOffersSequence();
							fumlConfigurationTrace.States.ActivityEdgeInstance_offers_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.Offer aValue : o_cast
									.getOffers()) {
								addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Offer) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getOffers().size() == o_cast.getOffers().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.Offer> it = o_cast
											.getOffers().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer aPreviousValue : previousValue
											.getOffers()) {
										fumlConfiguration.Activities.IntermediateActivities.Offer aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityEdgeInstance_offers_Value lastValue = tracedObject
										.getOffersSequence().get(tracedObject.getOffersSequence().size() - 1);
								newState.getActivityEdgeInstance_offers_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityEdgeInstance_offers_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityEdgeInstance_offers_Value();
								newValue.getOffers()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedOffer>) getExeToTraced(
												o_cast.getOffers(), newState));
								tracedObject.getOffersSequence().add(newValue);
								newState.getActivityEdgeInstance_offers_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Actions.BasicActions.ActionActivation) {
						fumlConfiguration.Actions.BasicActions.ActionActivation o_cast = (fumlConfiguration.Actions.BasicActions.ActionActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedActionActivation) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Actions.BasicActions.BasicActionsPackage.eINSTANCE
								.getActionActivation_PinActivations().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActionActivation_pinActivations_Value> valueSequence = tracedObject
									.getPinActivationsSequence();
							fumlConfigurationTrace.States.ActionActivation_pinActivations_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Actions.BasicActions.PinActivation aValue : o_cast
									.getPinActivations()) {
								addNewObjectToState((fumlConfiguration.Actions.BasicActions.PinActivation) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getPinActivations().size() == o_cast.getPinActivations().size()) {
									java.util.Iterator<fumlConfiguration.Actions.BasicActions.PinActivation> it = o_cast
											.getPinActivations().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation aPreviousValue : previousValue
											.getPinActivations()) {
										fumlConfiguration.Actions.BasicActions.PinActivation aCurrentValue = it.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActionActivation_pinActivations_Value lastValue = tracedObject
										.getPinActivationsSequence()
										.get(tracedObject.getPinActivationsSequence().size() - 1);
								newState.getActionActivation_pinActivations_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActionActivation_pinActivations_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActionActivation_pinActivations_Value();
								newValue.getPinActivations()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Actions.BasicActions.TracedPinActivation>) getExeToTraced(
												o_cast.getPinActivations(), newState));
								tracedObject.getPinActivationsSequence().add(newValue);
								newState.getActionActivation_pinActivations_Values().add(newValue);
							}
						}
					}
					if (o instanceof fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) {
						fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation o_cast = (fumlConfiguration.Activities.IntermediateActivities.ActivityNodeActivation) o;
						fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation tracedObject = (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityNodeActivation) exeToTraced
								.get(o_cast);
						if (p.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
								.getActivityNodeActivation_HeldTokens().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value> valueSequence = tracedObject
									.getHeldTokensSequence();
							fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.Token aValue : o_cast
									.getHeldTokens()) {
								addNewObjectToState((fumlConfiguration.Activities.IntermediateActivities.Token) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getHeldTokens().size() == o_cast.getHeldTokens().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.Token> it = o_cast
											.getHeldTokens().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken aPreviousValue : previousValue
											.getHeldTokens()) {
										fumlConfiguration.Activities.IntermediateActivities.Token aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value lastValue = tracedObject
										.getHeldTokensSequence().get(tracedObject.getHeldTokensSequence().size() - 1);
								newState.getActivityNodeActivation_heldTokens_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityNodeActivation_heldTokens_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityNodeActivation_heldTokens_Value();
								newValue.getHeldTokens()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedToken>) getExeToTraced(
												o_cast.getHeldTokens(), newState));
								tracedObject.getHeldTokensSequence().add(newValue);
								newState.getActivityNodeActivation_heldTokens_Values().add(newValue);
							}
						} else if (p
								.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
										.getActivityNodeActivation_IncomingEdges().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value> valueSequence = tracedObject
									.getIncomingEdgesSequence();
							fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
									.getIncomingEdges()) {
								addNewObjectToState(
										(fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getIncomingEdges().size() == o_cast.getIncomingEdges().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance> it = o_cast
											.getIncomingEdges().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance aPreviousValue : previousValue
											.getIncomingEdges()) {
										fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value lastValue = tracedObject
										.getIncomingEdgesSequence()
										.get(tracedObject.getIncomingEdgesSequence().size() - 1);
								newState.getActivityNodeActivation_incomingEdges_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityNodeActivation_incomingEdges_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityNodeActivation_incomingEdges_Value();
								newValue.getIncomingEdges()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
												o_cast.getIncomingEdges(), newState));
								tracedObject.getIncomingEdgesSequence().add(newValue);
								newState.getActivityNodeActivation_incomingEdges_Values().add(newValue);
							}
						} else if (p
								.getFeatureID() == fumlConfiguration.Activities.IntermediateActivities.IntermediateActivitiesPackage.eINSTANCE
										.getActivityNodeActivation_OutgoingEdges().getFeatureID()) {
							// We compare the last collection in the value
							// sequence, and the current one in the potentially
							// changed object
							List<fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value> valueSequence = tracedObject
									.getOutgoingEdgesSequence();
							fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value previousValue = null;
							if (!valueSequence.isEmpty()) {
								previousValue = valueSequence.get(valueSequence.size() - 1);
							}
							for (fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aValue : o_cast
									.getOutgoingEdges()) {
								addNewObjectToState(
										(fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance) aValue,
										newState);
							}
							boolean change = false;
							if (previousValue != null) {
								if (previousValue.getOutgoingEdges().size() == o_cast.getOutgoingEdges().size()) {
									java.util.Iterator<fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance> it = o_cast
											.getOutgoingEdges().iterator();
									for (fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance aPreviousValue : previousValue
											.getOutgoingEdges()) {
										fumlConfiguration.Activities.IntermediateActivities.ActivityEdgeInstance aCurrentValue = it
												.next();
										if (aPreviousValue != exeToTraced.get(aCurrentValue)) {
											change = true;
											break;
										}
									}
								} else {
									change = true;
								}
							} else {
								change = true;
							}
							if (change) {
								stateChanged = true;
								// Rollback: we remove the last value of this
								// field from the new state
								fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value lastValue = tracedObject
										.getOutgoingEdgesSequence()
										.get(tracedObject.getOutgoingEdgesSequence().size() - 1);
								newState.getActivityNodeActivation_outgoingEdges_Values().remove(lastValue);
								// And we create a proper new value
								fumlConfigurationTrace.States.ActivityNodeActivation_outgoingEdges_Value newValue = fumlConfigurationTrace.States.StatesFactory.eINSTANCE
										.createActivityNodeActivation_outgoingEdges_Value();
								newValue.getOutgoingEdges()
										.addAll((Collection<? extends fumlConfigurationTrace.States.fumlConfiguration.Activities.IntermediateActivities.TracedActivityEdgeInstance>) getExeToTraced(
												o_cast.getOutgoingEdges(), newState));
								tracedObject.getOutgoingEdgesSequence().add(newValue);
								newState.getActivityNodeActivation_outgoingEdges_Values().add(newValue);
							}
						}
					}
				}
			}
			if (stateChanged) {
				final fumlConfigurationTrace.Steps.SpecificStep currentStep = context.peekFirst();
				if (currentStep != null && currentStep instanceof org.eclipse.gemoc.trace.commons.model.trace.BigStep) {
					final fumlConfigurationTrace.States.State startingState = lastState;
					final fumlConfigurationTrace.States.State endingState = newState;
					addImplicitStep(currentStep, startingState, endingState);
				}
				lastState = newState;
				traceRoot.getStatesTrace().add(lastState);
			}
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void addStep(org.eclipse.gemoc.trace.commons.model.trace.Step step) {
		fumlConfigurationTrace.Steps.SpecificStep step_cast = null;
		if (step != null && step instanceof fumlConfigurationTrace.Steps.SpecificStep) {
			step_cast = (fumlConfigurationTrace.Steps.SpecificStep) step;
			if (mseModel == null) {
				mseModel = org.eclipse.gemoc.trace.commons.model.trace.TraceFactory.eINSTANCE.createMSEModel();
				traceResource.getContents().add(mseModel);
			}
			mseModel.getOwnedMSEs().add(step_cast.getMseoccurrence().getMse());

			// Creating generic (or almost generic) links
			fumlConfigurationTrace.States.State state = traceRoot.getStatesTrace()
					.get(traceRoot.getStatesTrace().size() - 1);
			step_cast.setStartingState(state);
			if (!context.isEmpty() && context.getFirst() != null) {
				((SequentialStep<fumlConfigurationTrace.Steps.SpecificStep>) context.getFirst()).getSubSteps()
						.add(step_cast);
			} else {
				traceRoot.getRootStep().getSubSteps().add(step_cast);
			}

			// Adding step in its dedicated sequence/dimension
			if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_DoAction_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation) step_cast;
				traceRoot.getFumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_GetPinActivation_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_Inisitalize_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation) step_cast;
				traceRoot.getFumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation fumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_GetCallExecution_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_RemoveCallExecution_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation fumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation fumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation fumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation fumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueAction) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueAction fumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueActionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueAction) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueAction_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_OpaqueActionActivation_DoAction_OpaqueActionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation fumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation) step_cast;
				traceRoot.getFumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation fumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation_Sequence()
						.add(fumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation fumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation_Sequence()
						.add(fumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation fumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation_Sequence()
						.add(fumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation fumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation_Sequence()
						.add(fumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation fumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation_Sequence()
						.add(fumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstanceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstanceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstanceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstanceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstanceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstanceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstanceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstanceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstanceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstanceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateEdgeInstances_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_CreateNodeActivations_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Fire_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetNodeActivation_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetTokens_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Initialize_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsRunning_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsSourceFor_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_RemoveToken_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Run_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_Terminate_ActivityNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetActivityExecution_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetOutputParameterNodeActivations_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroupInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroupInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation fumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation fumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlToken fumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ControlToken_IsControl_ControlTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_ExecuteDecisionInputBehavior_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowInstance_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_HasObjectFlowInput_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation fumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken fumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedToken fumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ForkedToken_Initialize_ForkedTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken fumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken fumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation fumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation fumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountUnofferedTokens_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Initialize_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectToken fumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectToken_GetValue_ObjectTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectToken) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectToken fumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectTokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectToken) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectToken_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_ObjectToken_IsControl_ObjectTokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer fumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_OfferInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_OfferInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer fumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_OfferInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_OfferInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer fumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_OfferInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_OfferInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer fumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_OfferInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer) step_cast;
				traceRoot
						.getFumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_OfferInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_GetValue_Token) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_GetValue_Token fumlConfiguration_Activities_IntermediateActivities_Token_GetValue_TokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_GetValue_Token) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Token_GetValue_Token_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Token_GetValue_TokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsControl_Token) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsControl_Token fumlConfiguration_Activities_IntermediateActivities_Token_IsControl_TokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsControl_Token) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Token_IsControl_Token_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Token_IsControl_TokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_Token) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_Token fumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_TokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_Token) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_Token_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Token_IsWithdrawn_TokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token fumlConfiguration_Activities_IntermediateActivities_Token_Transfer_TokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Token_Transfer_TokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token fumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_TokenInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token) step_cast;
				traceRoot.getFumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token_Sequence()
						.add(fumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_TokenInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue fumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValue fumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_BooleanValue_Equals_BooleanValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValue fumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_BooleanValue_New_BooleanValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue fumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValue fumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_CompoundValue_GetFeatureValue_CompoundValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue fumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Evaluation_Evaluate_Evaluation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Evaluation_Evaluate_Evaluation fumlConfiguration_Classes_Kernel_Evaluation_Evaluate_EvaluationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Evaluation_Evaluate_Evaluation) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Evaluation_Evaluate_Evaluation_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Evaluation_Evaluate_EvaluationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue fumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue fumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue fumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue fumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValue fumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_IntegerValue_Equals_IntegerValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValue fumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_IntegerValue_New_IntegerValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation fumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation) step_cast;
				traceRoot
						.getFumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation_Sequence()
						.add(fumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation fumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation_Sequence()
						.add(fumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation fumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluationInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation) step_cast;
				traceRoot
						.getFumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation_Sequence()
						.add(fumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluationInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Copy_Object) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Copy_Object fumlConfiguration_Classes_Kernel_Object_Copy_ObjectInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Copy_Object) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Object_Copy_Object_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Object_Copy_ObjectInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Destroy_Object) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Destroy_Object fumlConfiguration_Classes_Kernel_Object_Destroy_ObjectInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Destroy_Object) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Object_Destroy_Object_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Object_Destroy_ObjectInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_GetTypes_Object) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_GetTypes_Object fumlConfiguration_Classes_Kernel_Object_GetTypes_ObjectInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_GetTypes_Object) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Object_GetTypes_Object_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Object_GetTypes_ObjectInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_New_Object) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_New_Object fumlConfiguration_Classes_Kernel_Object_New_ObjectInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_New_Object) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Object_New_Object_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Object_New_ObjectInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue fumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValue fumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValue) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_PrimitiveValue_GetTypes_PrimitiveValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference fumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_ReferenceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_ReferenceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference fumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_ReferenceInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_ReferenceInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue fumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue) step_cast;
				traceRoot
						.getFumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue_Sequence()
						.add(fumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Copy_Value) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Copy_Value fumlConfiguration_Classes_Kernel_Value_Copy_ValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Copy_Value) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Value_Copy_Value_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Value_Copy_ValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Equals_Value) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Equals_Value fumlConfiguration_Classes_Kernel_Value_Equals_ValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Equals_Value) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Value_Equals_Value_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Value_Equals_ValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_GetTypes_Value) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_GetTypes_Value fumlConfiguration_Classes_Kernel_Value_GetTypes_ValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_GetTypes_Value) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Value_GetTypes_Value_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Value_GetTypes_ValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_HasType_Value) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_HasType_Value fumlConfiguration_Classes_Kernel_Value_HasType_ValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_HasType_Value) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Value_HasType_Value_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Value_HasType_ValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_New_Value) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_New_Value fumlConfiguration_Classes_Kernel_Value_New_ValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_New_Value) step_cast;
				traceRoot.getFumlConfiguration_Classes_Kernel_Value_New_Value_Sequence()
						.add(fumlConfiguration_Classes_Kernel_Value_New_ValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution) step_cast;
				traceRoot.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_Execution) step_cast;
				traceRoot.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Execute_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution) step_cast;
				traceRoot.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_Execution) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetOutputParameterValues_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_Execution) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetParameterValue_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_Execution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_Execution fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_ExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_Execution) step_cast;
				traceRoot.getFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_Execution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Terminate_ExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecution fumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_DoBody_OpaqueBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution fumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue) {
				fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue fumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValueInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue) step_cast;
				traceRoot
						.getFumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue_Sequence()
						.add(fumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValueInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory fumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactoryInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory) step_cast;
				traceRoot.getFumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory_Sequence()
						.add(fumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactoryInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory fumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactoryInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory) step_cast;
				traceRoot.getFumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory_Sequence()
						.add(fumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactoryInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactory) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactory fumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactoryInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactory) step_cast;
				traceRoot.getFumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactory_Sequence()
						.add(fumlConfiguration_Loci_ExecutionFactory_GetBuiltInType_ExecutionFactoryInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory fumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactoryInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory) step_cast;
				traceRoot
						.getFumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory_Sequence()
						.add(fumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactoryInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory fumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactoryInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory) step_cast;
				traceRoot.getFumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory_Sequence()
						.add(fumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactoryInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Evaluate_Executor) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Evaluate_Executor fumlConfiguration_Loci_Executor_Evaluate_ExecutorInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Evaluate_Executor) step_cast;
				traceRoot.getFumlConfiguration_Loci_Executor_Evaluate_Executor_Sequence()
						.add(fumlConfiguration_Loci_Executor_Evaluate_ExecutorInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Execute_Executor) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Execute_Executor fumlConfiguration_Loci_Executor_Execute_ExecutorInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Execute_Executor) step_cast;
				traceRoot.getFumlConfiguration_Loci_Executor_Execute_Executor_Sequence()
						.add(fumlConfiguration_Loci_Executor_Execute_ExecutorInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Add_Locus) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Add_Locus fumlConfiguration_Loci_Locus_Add_LocusInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Add_Locus) step_cast;
				traceRoot.getFumlConfiguration_Loci_Locus_Add_Locus_Sequence()
						.add(fumlConfiguration_Loci_Locus_Add_LocusInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Instantiate_Locus) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Instantiate_Locus fumlConfiguration_Loci_Locus_Instantiate_LocusInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Instantiate_Locus) step_cast;
				traceRoot.getFumlConfiguration_Loci_Locus_Instantiate_Locus_Sequence()
						.add(fumlConfiguration_Loci_Locus_Instantiate_LocusInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Remove_Locus) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Remove_Locus fumlConfiguration_Loci_Locus_Remove_LocusInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Remove_Locus) step_cast;
				traceRoot.getFumlConfiguration_Loci_Locus_Remove_Locus_Sequence()
						.add(fumlConfiguration_Loci_Locus_Remove_LocusInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitor) {
				fumlConfigurationTrace.Steps.FumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitor fumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitorInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitor) step_cast;
				traceRoot.getFumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitor_Sequence()
						.add(fumlConfiguration_Loci_SemanticVisitor_Initialize_SemanticVisitorInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_ModelConfiguration_Main) {
				fumlConfigurationTrace.Steps.FumlConfiguration_ModelConfiguration_Main fumlConfiguration_ModelConfiguration_MainInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_ModelConfiguration_Main) step_cast;
				traceRoot.getFumlConfiguration_ModelConfiguration_Main_Sequence()
						.add(fumlConfiguration_ModelConfiguration_MainInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_DoBody_IntegerGreaterFunctionBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerGreaterFunctionBehaviorExecution_New_IntegerGreaterFunctionBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_DoBody_IntegerLessFunctionBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerLessFunctionBehaviorExecution_New_IntegerLessFunctionBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_DoBody_IntegerPlusFunctionBehaviorExecutionInstance);
			} else if (step_cast instanceof fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecution) {
				fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecution fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecutionInstance = (fumlConfigurationTrace.Steps.FumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecution) step_cast;
				traceRoot
						.getFumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecution_Sequence()
						.add(fumlConfiguration_PrimitiveBehaviors_IntegerFunctions_IntegerPlusFunctionBehaviorExecution_New_IntegerPlusFunctionBehaviorExecutionInstance);
			}
		}
		context.push(step_cast);
	}

	@SuppressWarnings("unchecked")
	private void addImplicitStep(fumlConfigurationTrace.Steps.SpecificStep currentStep,
			fumlConfigurationTrace.States.State startingState, fumlConfigurationTrace.States.State endingState) {

		fumlConfigurationTrace.Steps.SpecificStep implicitStep = null;
		if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_CreateNodeActivations_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_Fire_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_HasOffers_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_IsReady_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_PutToken_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_PutTokens_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_SendOffers_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_ShouldFireAgain_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_TakeOfferedTokens_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_TakeTokens_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_ActionActivation_Terminate_ActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_CallActionActivation_CollectOutputParameterValues_CallActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_CallActionActivation_DoAction_CallActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_CallActionActivation_InitializeInputParameterValues_CallActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_CallActionActivation_Terminate_CallActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_CallBehaviorActionActivation_GetCallExecution_CallBehaviorActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_InputPinActivation_IsReady_InputPinActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_InputPinActivation_ReceiveOffer_InputPinActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_PinActivation_Fire_PinActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_BasicActions_PinActivation_TakeOfferedTokens_PinActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_IntermediateActions_AddStructuralFeatureValueActionActivation_DoAction_AddStructuralFeatureValueActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_IntermediateActions_CreateObjectActionActivation_DoAction_CreateObjectActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_IntermediateActions_ReadStructuralFeatureActionActivation_DoAction_ReadStructuralFeatureActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Actions_IntermediateActions_ValueSpecificationActionActivation_DoAction_ValueSpecificationActionActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_CountOfferedValues_ActivityEdgeInstance_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_HasOffer_ActivityEdgeInstance_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_SendOffer_ActivityEdgeInstance_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_ActivityEdgeInstance_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityEdgeInstance_TakeOfferedTokens_int_ActivityEdgeInstance_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_CollectOutputParameterValues_ActivityExecution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Execute_ActivityExecution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_SetParameterValueValues_ActivityExecution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityExecution_Terminate_ActivityExecution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityFinalNodeActivation_Fire_ActivityFinalNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Activate_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CheckIncomingEdges_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateEdgeInstances_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivation_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_CreateNodeActivations_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetInitiallyEnabledNodeActivations_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetNodeActivation_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_GetSourceActivations_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_RunNodes_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_Run_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivationGroup_TerminateAll_ActivityNodeActivationGroup_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddToken_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_AddTokens_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ClearTokens_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetActivityExecution_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionContext_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_GetExecutionLocus_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_HasOffers_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_IsReady_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_ReceiveOffer_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_SendOffers_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityNodeActivation_TakeOfferedTokens_ActivityNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_ClearTokens_ActivityParameterNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ActivityParameterNodeActivation_Fire_ActivityParameterNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ControlNodeActivation_Fire_ControlNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_DetermineOfferedTokens_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Fire_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionInputFlowValue_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_GetDecisionValues_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_IsReady_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_RemoveJoinedControlTokens_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_TakeOfferedTokens_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_DecisionNodeActivation_Test_DecisionNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ForkNodeActivation_Fire_ForkNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ForkedToken_GetValue_ForkedToken_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ForkedToken_IsControl_ForkedToken_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ForkedToken_Withdraw_ForkedToken_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_InitialNodeActivation_Fire_InitialNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_JoinNodeActivation_IsReady_JoinNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_AddToken_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_ClearTokens_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_CountOfferedValues_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_GetUnofferedTokens_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendOffers_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_SendUnofferedTokens_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_TakeUnofferedTokens_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_ObjectNodeActivation_Terminate_ObjectNodeActivation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Offer_CountOfferedValues_Offer_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Offer_GetOfferedTokens_Offer_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Offer_HasTokens_Offer_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Offer_RemoveWithdrawnTokens_Offer_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Token_Transfer_Token_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Activities_IntermediateActivities_Token_Withdraw_Token_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_BooleanValue_Copy_BooleanValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_CompoundValue_Copy_CompoundValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_CompoundValue_SetFeatureValue_CompoundValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_ExtensionalValue_Copy_ExtensionalValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_ExtensionalValue_Destroy_ExtensionalValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_FeatureValue_Copy_FeatureValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_IntegerValue_Copy_IntegerValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_LiteralBooleanEvaluation_Evaluate_LiteralBooleanEvaluation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_LiteralEvaluation_GetType_LiteralEvaluation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_LiteralIntegerEvaluation_Evaluate_LiteralIntegerEvaluation_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Copy_Object) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Object_Copy_Object_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Object_Destroy_Object) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Object_Destroy_Object_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_PrimitiveValue_Copy_PrimitiveValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Reference_GetFeatureValue_Reference_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Reference_SetFeatureValue_Reference_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_StructuredValue_CreateFeatureValues_StructuredValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Copy_Value) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Value_Copy_Value_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_Equals_Value) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Value_Equals_Value_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Classes_Kernel_Value_HasType_Value) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Classes_Kernel_Value_HasType_Value_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_Copy_Execution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_GetBehavior_Execution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_CommonBehaviors_BasicBehaviors_Execution_SetParameterValue_Execution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_CommonBehaviors_BasicBehaviors_OpaqueBehaviorExecution_Execute_OpaqueBehaviorExecution_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_CommonBehaviors_BasicBehaviors_ParameterValue_Copy_ParameterValue_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_ExecutionFactory_CreateEvaluation_ExecutionFactory_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_ExecutionFactory_CreateExecution_ExecutionFactory_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_ExecutionFactory_InstantiateOpaqueBehaviorExecution_ExecutionFactory_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_ExecutionFactory_InstantiateVisitor_ExecutionFactory_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Evaluate_Executor) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_Executor_Evaluate_Executor_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Executor_Execute_Executor) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_Executor_Execute_Executor_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_Loci_Locus_Instantiate_Locus) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_Loci_Locus_Instantiate_Locus_ImplicitStep();
		} else if (currentStep instanceof fumlConfigurationTrace.Steps.FumlConfiguration_ModelConfiguration_Main) {
			implicitStep = fumlConfigurationTrace.Steps.StepsFactory.eINSTANCE
					.createFumlConfiguration_ModelConfiguration_Main_ImplicitStep();
		}
		if (implicitStep != null) {
			implicitStep.setStartingState(startingState);
			implicitStep.setEndingState(endingState);
			((SequentialStep<fumlConfigurationTrace.Steps.SpecificStep>) currentStep).getSubSteps().add(implicitStep);

		}
	}

	@Override
	public void endStep(org.eclipse.gemoc.trace.commons.model.trace.Step step) {
		fumlConfigurationTrace.Steps.SpecificStep popped = context.pop();
		if (popped != null)
			popped.setEndingState(lastState);
	}

	@Override
	public EObject initTrace(LaunchConfiguration launchConfiguration) {
		// Create root
		traceRoot = fumlConfigurationTrace.FumlConfigurationTraceFactory.eINSTANCE.createSpecificTrace();
		traceRoot.setLaunchconfiguration(launchConfiguration);

		// Create root sequential step
		org.eclipse.gemoc.trace.commons.model.trace.SequentialStep<fumlConfigurationTrace.Steps.SpecificStep> rootStep = org.eclipse.gemoc.trace.commons.model.trace.TraceFactory.eINSTANCE
				.createSequentialStep();
		traceRoot.setRootStep(rootStep);

		// Put in the resource
		traceResource.getContents().add(traceRoot);

		return traceRoot;
	}

	@Override
	public void save() {
		try {
			traceResource.save(null);
		} catch (java.io.IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public void save(URI uri) {
		traceResource.setURI(uri);
		save();
	}

	private Set<Resource> getAllExecutedModelResources() {
		Set<Resource> allResources = new HashSet<>();
		allResources.add(executedModel);
		allResources.addAll(org.eclipse.gemoc.commons.eclipse.emf.EMFResource.getRelatedResources(executedModel));
		return allResources;
	}

	private Collection<? extends EObject> getExeToTraced(Collection<? extends EObject> exeObjects,
			fumlConfigurationTrace.States.State newState) {
		Collection<EObject> result = new ArrayList<EObject>();
		for (EObject exeObject : exeObjects) {
			result.add(exeToTraced.get(exeObject));
		}
		return result;
	}

	@Override
	public boolean isPartialTraceConstructor() {
		return false;
	}
}
